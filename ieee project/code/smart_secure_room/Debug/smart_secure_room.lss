
smart_secure_room.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000420c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  0000420c  000042a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800172  00800172  000043b2  2**0
                  ALLOC
  3 .stab         00002ed4  00000000  00000000  000043b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001146  00000000  00000000  00007288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000083ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000856e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000875e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000ab6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000bee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d0bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000d27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000d56f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__vector_1>
       8:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <main>
      8a:	0c 94 04 21 	jmp	0x4208	; 0x4208 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 94 20 	jmp	0x4128	; 0x4128 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 94 20 	jmp	0x4128	; 0x4128 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 94 20 	jmp	0x4128	; 0x4128 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 94 20 	jmp	0x4128	; 0x4128 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 94 20 	jmp	0x4128	; 0x4128 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <ADC_open>:
#include "avr/io.h"
#include "common_macros.h"


void ADC_open(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);  /*Enable the ADC*/
     e00:	a6 e2       	ldi	r26, 0x26	; 38
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e6 e2       	ldi	r30, 0x26	; 38
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	8c 93       	st	X, r24
}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <ADC_close>:

void ADC_close(void)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADEN);  /*Enable the ADC*/
     e1c:	a6 e2       	ldi	r26, 0x26	; 38
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e6 e2       	ldi	r30, 0x26	; 38
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 77       	andi	r24, 0x7F	; 127
     e28:	8c 93       	st	X, r24
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <ADC_init>:

void ADC_init(ADC_config *config)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <ADC_init+0x6>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01

	ADMUX  = (config->Ref)<<6;
     e3e:	a7 e2       	ldi	r26, 0x27	; 39
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	80 81       	ld	r24, Z
     e48:	82 95       	swap	r24
     e4a:	88 0f       	add	r24, r24
     e4c:	88 0f       	add	r24, r24
     e4e:	80 7c       	andi	r24, 0xC0	; 192
     e50:	8c 93       	st	X, r24
	ADCSRA = 0x87;  /*128 prescaler*/
     e52:	e6 e2       	ldi	r30, 0x26	; 38
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	87 e8       	ldi	r24, 0x87	; 135
     e58:	80 83       	st	Z, r24
	ADCSRA = (ADCSRA & 0XF8) | (config->pre_secaler);
     e5a:	a6 e2       	ldi	r26, 0x26	; 38
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e6 e2       	ldi	r30, 0x26	; 38
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	98 2f       	mov	r25, r24
     e66:	98 7f       	andi	r25, 0xF8	; 248
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	81 81       	ldd	r24, Z+1	; 0x01
     e6e:	89 2b       	or	r24, r25
     e70:	8c 93       	st	X, r24
	SFIOR  = (SFIOR  & 0X1F) | (config->mode)<<6;
     e72:	a0 e5       	ldi	r26, 0x50	; 80
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e0 e5       	ldi	r30, 0x50	; 80
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	28 2f       	mov	r18, r24
     e7e:	2f 71       	andi	r18, 0x1F	; 31
     e80:	e9 81       	ldd	r30, Y+1	; 0x01
     e82:	fa 81       	ldd	r31, Y+2	; 0x02
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	00 24       	eor	r0, r0
     e8c:	96 95       	lsr	r25
     e8e:	87 95       	ror	r24
     e90:	07 94       	ror	r0
     e92:	96 95       	lsr	r25
     e94:	87 95       	ror	r24
     e96:	07 94       	ror	r0
     e98:	98 2f       	mov	r25, r24
     e9a:	80 2d       	mov	r24, r0
     e9c:	82 2b       	or	r24, r18
     e9e:	8c 93       	st	X, r24

}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <ADC_Single_ended_read_channel>:

/*If I used single ended input*/
#ifdef  SINGLE_ENDED_INPUT

uint16 ADC_Single_ended_read_channel(ADC_Single_endede_pins a_pin)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTA_ID, a_pin , INPUT); /*Make this pin Input*/
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	69 81       	ldd	r22, Y+1	; 0x01
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	ADMUX = (ADMUX & 0XE0) | (a_pin);
     ec0:	a7 e2       	ldi	r26, 0x27	; 39
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e2       	ldi	r30, 0x27	; 39
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	98 2f       	mov	r25, r24
     ecc:	90 7e       	andi	r25, 0xE0	; 224
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	89 2b       	or	r24, r25
     ed2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);  /*Start Conversion*/
     ed4:	a6 e2       	ldi	r26, 0x26	; 38
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e6 e2       	ldi	r30, 0x26	; 38
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 64       	ori	r24, 0x40	; 64
     ee0:	8c 93       	st	X, r24
    while( !GET_BIT(ADCSRA,ADIF) ); /*Polling till the ADC completes Conversion*/
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	80 71       	andi	r24, 0x10	; 16
     eee:	90 70       	andi	r25, 0x00	; 0
     ef0:	95 95       	asr	r25
     ef2:	87 95       	ror	r24
     ef4:	95 95       	asr	r25
     ef6:	87 95       	ror	r24
     ef8:	95 95       	asr	r25
     efa:	87 95       	ror	r24
     efc:	95 95       	asr	r25
     efe:	87 95       	ror	r24
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	79 f3       	breq	.-34     	; 0xee2 <ADC_Single_ended_read_channel+0x38>
	CLEAR_BIT(ADCSRA,ADSC);  /*Stop Conversion*/
     f04:	a6 e2       	ldi	r26, 0x26	; 38
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e6 e2       	ldi	r30, 0x26	; 38
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8f 7b       	andi	r24, 0xBF	; 191
     f10:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADIF); //TO clear the ADC flag
     f12:	a6 e2       	ldi	r26, 0x26	; 38
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e6 e2       	ldi	r30, 0x26	; 38
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	80 61       	ori	r24, 0x10	; 16
     f1e:	8c 93       	st	X, r24

	return ADC;
     f20:	e4 e2       	ldi	r30, 0x24	; 36
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
}
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <UART_init>:
#include "UART.h"
#include "avr/io.h"
#include "common_macros.h"

void UART_init(UART_configType *configPtr)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <UART_init+0x6>
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	9b 83       	std	Y+3, r25	; 0x03
     f3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ubrr_value;
	UCSRA= (1<<U2X);
     f40:	eb e2       	ldi	r30, 0x2B	; 43
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	80 83       	st	Z, r24
	/*Double the USART Transmission Speed*/
	UCSRB = (1<<RXEN) | (1<<TXEN) | ( (GET_BIT(configPtr->char_size,2))<<2 );
     f48:	aa e2       	ldi	r26, 0x2A	; 42
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea 81       	ldd	r30, Y+2	; 0x02
     f4e:	fb 81       	ldd	r31, Y+3	; 0x03
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	84 70       	andi	r24, 0x04	; 4
     f54:	88 61       	ori	r24, 0x18	; 24
     f56:	8c 93       	st	X, r24
	/*
	 RXEN Enable the RX
	 TXEN Enable the TX
	 */
	UCSRC = (1<<URSEL) | ( (configPtr->stop_bit)<<USBS)
     f58:	a0 e4       	ldi	r26, 0x40	; 64
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ea 81       	ldd	r30, Y+2	; 0x02
     f5e:	fb 81       	ldd	r31, Y+3	; 0x03
     f60:	81 81       	ldd	r24, Z+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	28 2f       	mov	r18, r24
     f74:	20 68       	ori	r18, 0x80	; 128
     f76:	ea 81       	ldd	r30, Y+2	; 0x02
     f78:	fb 81       	ldd	r31, Y+3	; 0x03
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	81 70       	andi	r24, 0x01	; 1
     f82:	90 70       	andi	r25, 0x00	; 0
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	28 2b       	or	r18, r24
     f8a:	ea 81       	ldd	r30, Y+2	; 0x02
     f8c:	fb 81       	ldd	r31, Y+3	; 0x03
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	82 70       	andi	r24, 0x02	; 2
     f96:	90 70       	andi	r25, 0x00	; 0
     f98:	95 95       	asr	r25
     f9a:	87 95       	ror	r24
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 2b       	or	r24, r18
     fa6:	8c 93       	st	X, r24
					| ((GET_BIT(configPtr->char_size,0))<< 1) | ( (GET_BIT(configPtr->char_size,1))<<2 );
	UCSRC = (UCSRC & 0xCF) | ( (configPtr->parity_mode)<<4 );
     fa8:	a0 e4       	ldi	r26, 0x40	; 64
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e0 e4       	ldi	r30, 0x40	; 64
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	28 2f       	mov	r18, r24
     fb4:	2f 7c       	andi	r18, 0xCF	; 207
     fb6:	ea 81       	ldd	r30, Y+2	; 0x02
     fb8:	fb 81       	ldd	r31, Y+3	; 0x03
     fba:	80 81       	ld	r24, Z
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	82 95       	swap	r24
     fc2:	92 95       	swap	r25
     fc4:	90 7f       	andi	r25, 0xF0	; 240
     fc6:	98 27       	eor	r25, r24
     fc8:	80 7f       	andi	r24, 0xF0	; 240
     fca:	98 27       	eor	r25, r24
     fcc:	82 2b       	or	r24, r18
     fce:	8c 93       	st	X, r24
	 Asynchronous operation
	 Parity mode is disable
	 1 bit for stop bit
	 */
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (configPtr->baud_rate * 8UL))) - 1);/*equation in data sheet*/
     fd0:	ea 81       	ldd	r30, Y+2	; 0x02
     fd2:	fb 81       	ldd	r31, Y+3	; 0x03
     fd4:	83 81       	ldd	r24, Z+3	; 0x03
     fd6:	94 81       	ldd	r25, Z+4	; 0x04
     fd8:	a5 81       	ldd	r26, Z+5	; 0x05
     fda:	b6 81       	ldd	r27, Z+6	; 0x06
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	aa 1f       	adc	r26, r26
     fe2:	bb 1f       	adc	r27, r27
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	aa 1f       	adc	r26, r26
     fea:	bb 1f       	adc	r27, r27
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	aa 1f       	adc	r26, r26
     ff2:	bb 1f       	adc	r27, r27
     ff4:	9c 01       	movw	r18, r24
     ff6:	ad 01       	movw	r20, r26
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	94 e2       	ldi	r25, 0x24	; 36
     ffc:	a4 ef       	ldi	r26, 0xF4	; 244
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	0e 94 66 20 	call	0x40cc	; 0x40cc <__udivmodsi4>
    1008:	da 01       	movw	r26, r20
    100a:	c9 01       	movw	r24, r18
    100c:	81 50       	subi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1010:	e0 e4       	ldi	r30, 0x40	; 64
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	89 2f       	mov	r24, r25
    101c:	99 0f       	add	r25, r25
    101e:	99 0b       	sbc	r25, r25
    1020:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1022:	e9 e2       	ldi	r30, 0x29	; 41
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	80 83       	st	Z, r24

}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <UART_sendByte>:


void UART_sendByte(uint8 const data)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,TXC));
	/*we make polling to make sure that we didn't end the function until all bits are shifted to shift register*/
	SET_BIT(UCSRA,TXC);
	/*To clear the flag*/
#else
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1042:	eb e2       	ldi	r30, 0x2B	; 43
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	80 72       	andi	r24, 0x20	; 32
    104e:	90 70       	andi	r25, 0x00	; 0
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	b9 f3       	breq	.-18     	; 0x1042 <UART_sendByte+0xc>
	/*This bit is set if the transimeter is ready to receive another byte*/
	UDR = data;
    1054:	ec e2       	ldi	r30, 0x2C	; 44
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	80 83       	st	Z, r24
#endif
}
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	/*To wait until this bit is 1 ,becase this bit is set when
	  there are data which is ready to be read in UDR*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
    106c:	eb e2       	ldi	r30, 0x2B	; 43
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	dc f7       	brge	.-10     	; 0x106c <UART_recieveByte+0x8>
	return UDR;
    1076:	ec e2       	ldi	r30, 0x2C	; 44
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <UART_sendString>:

void UART_sendString(const uint8 *str)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <UART_sendString+0x6>
    1088:	00 d0       	rcall	.+0      	; 0x108a <UART_sendString+0x8>
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	9c 83       	std	Y+4, r25	; 0x04
    1090:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i=0;
    1092:	1a 82       	std	Y+2, r1	; 0x02
    1094:	19 82       	std	Y+1, r1	; 0x01
    1096:	0f c0       	rjmp	.+30     	; 0x10b6 <UART_sendString+0x34>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    1098:	2b 81       	ldd	r18, Y+3	; 0x03
    109a:	3c 81       	ldd	r19, Y+4	; 0x04
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	f9 01       	movw	r30, r18
    10a2:	e8 0f       	add	r30, r24
    10a4:	f9 1f       	adc	r31, r25
    10a6:	80 81       	ld	r24, Z
    10a8:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
		i++;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *str)
{
	uint16 i=0;
	while(str[i] != '\0')
    10b6:	2b 81       	ldd	r18, Y+3	; 0x03
    10b8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	f9 01       	movw	r30, r18
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	80 81       	ld	r24, Z
    10c6:	88 23       	and	r24, r24
    10c8:	39 f7       	brne	.-50     	; 0x1098 <UART_sendString+0x16>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <UART_recieveString>:


void UART_recieveString(uint8 *str)
{
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <UART_recieveString+0xa>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <UART_recieveString+0xc>
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9c 83       	std	Y+4, r25	; 0x04
    10ec:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i=0;
    10ee:	1a 82       	std	Y+2, r1	; 0x02
    10f0:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_recieveByte();
    10f2:	2b 81       	ldd	r18, Y+3	; 0x03
    10f4:	3c 81       	ldd	r19, Y+4	; 0x04
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	89 01       	movw	r16, r18
    10fc:	08 0f       	add	r16, r24
    10fe:	19 1f       	adc	r17, r25
    1100:	0e 94 32 08 	call	0x1064	; 0x1064 <UART_recieveByte>
    1104:	f8 01       	movw	r30, r16
    1106:	80 83       	st	Z, r24
    1108:	0b c0       	rjmp	.+22     	; 0x1120 <UART_recieveString+0x48>

	while('#' != str[i++]){
		str[i]=UART_recieveByte();
    110a:	2b 81       	ldd	r18, Y+3	; 0x03
    110c:	3c 81       	ldd	r19, Y+4	; 0x04
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	89 01       	movw	r16, r18
    1114:	08 0f       	add	r16, r24
    1116:	19 1f       	adc	r17, r25
    1118:	0e 94 32 08 	call	0x1064	; 0x1064 <UART_recieveByte>
    111c:	f8 01       	movw	r30, r16
    111e:	80 83       	st	Z, r24
void UART_recieveString(uint8 *str)
{
	uint16 i=0;
	str[i]=UART_recieveByte();

	while('#' != str[i++]){
    1120:	2b 81       	ldd	r18, Y+3	; 0x03
    1122:	3c 81       	ldd	r19, Y+4	; 0x04
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	f9 01       	movw	r30, r18
    112a:	e8 0f       	add	r30, r24
    112c:	f9 1f       	adc	r31, r25
    112e:	80 81       	ld	r24, Z
    1130:	1d 82       	std	Y+5, r1	; 0x05
    1132:	83 32       	cpi	r24, 0x23	; 35
    1134:	11 f0       	breq	.+4      	; 0x113a <UART_recieveString+0x62>
    1136:	f1 e0       	ldi	r31, 0x01	; 1
    1138:	fd 83       	std	Y+5, r31	; 0x05
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	88 23       	and	r24, r24
    1148:	01 f7       	brne	.-64     	; 0x110a <UART_recieveString+0x32>
		str[i]=UART_recieveByte();
	  }

	str[i]='\0';
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	29 81       	ldd	r18, Y+1	; 0x01
    1150:	3a 81       	ldd	r19, Y+2	; 0x02
    1152:	fc 01       	movw	r30, r24
    1154:	e2 0f       	add	r30, r18
    1156:	f3 1f       	adc	r31, r19
    1158:	10 82       	st	Z, r1
}
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <GPIO_setupPinDirection+0x6>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <GPIO_setupPinDirection+0x8>
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	6a 83       	std	Y+2, r22	; 0x02
    1180:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if( port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	08 f0       	brcs	.+2      	; 0x118a <GPIO_setupPinDirection+0x1c>
    1188:	d5 c0       	rjmp	.+426    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	88 30       	cpi	r24, 0x08	; 8
    118e:	08 f0       	brcs	.+2      	; 0x1192 <GPIO_setupPinDirection+0x24>
    1190:	d1 c0       	rjmp	.+418    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
	{
		/* do nothing */
	}else
	{
		switch(port_num)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3d 83       	std	Y+5, r19	; 0x05
    119a:	2c 83       	std	Y+4, r18	; 0x04
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <GPIO_setupPinDirection+0x3a>
    11a6:	43 c0       	rjmp	.+134    	; 0x122e <GPIO_setupPinDirection+0xc0>
    11a8:	2c 81       	ldd	r18, Y+4	; 0x04
    11aa:	3d 81       	ldd	r19, Y+5	; 0x05
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	2c f4       	brge	.+10     	; 0x11bc <GPIO_setupPinDirection+0x4e>
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	71 f0       	breq	.+28     	; 0x11d6 <GPIO_setupPinDirection+0x68>
    11ba:	bc c0       	rjmp	.+376    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <GPIO_setupPinDirection+0x5a>
    11c6:	5f c0       	rjmp	.+190    	; 0x1286 <GPIO_setupPinDirection+0x118>
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <GPIO_setupPinDirection+0x66>
    11d2:	85 c0       	rjmp	.+266    	; 0x12de <GPIO_setupPinDirection+0x170>
    11d4:	af c0       	rjmp	.+350    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == 1)
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	a1 f4       	brne	.+40     	; 0x1204 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    11dc:	aa e3       	ldi	r26, 0x3A	; 58
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ea e3       	ldi	r30, 0x3A	; 58
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <GPIO_setupPinDirection+0x8c>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <GPIO_setupPinDirection+0x88>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	98 c0       	rjmp	.+304    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRA,pin_num);
    1204:	aa e3       	ldi	r26, 0x3A	; 58
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ea e3       	ldi	r30, 0x3A	; 58
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <GPIO_setupPinDirection+0xb4>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <GPIO_setupPinDirection+0xb0>
    1226:	80 95       	com	r24
    1228:	84 23       	and	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	83 c0       	rjmp	.+262    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTB_ID:
			if(direction == 1)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	a1 f4       	brne	.+40     	; 0x125c <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1234:	a7 e3       	ldi	r26, 0x37	; 55
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <GPIO_setupPinDirection+0xe4>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <GPIO_setupPinDirection+0xe0>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	6c c0       	rjmp	.+216    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRB,pin_num);
    125c:	a7 e3       	ldi	r26, 0x37	; 55
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e7 e3       	ldi	r30, 0x37	; 55
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <GPIO_setupPinDirection+0x10c>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <GPIO_setupPinDirection+0x108>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	57 c0       	rjmp	.+174    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTC_ID:
			if(direction == 1)
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	a1 f4       	brne	.+40     	; 0x12b4 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    128c:	a4 e3       	ldi	r26, 0x34	; 52
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <GPIO_setupPinDirection+0x13c>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <GPIO_setupPinDirection+0x138>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	40 c0       	rjmp	.+128    	; 0x1334 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRC,pin_num);
    12b4:	a4 e3       	ldi	r26, 0x34	; 52
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e4 e3       	ldi	r30, 0x34	; 52
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_setupPinDirection+0x164>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_setupPinDirection+0x160>
    12d6:	80 95       	com	r24
    12d8:	84 23       	and	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	2b c0       	rjmp	.+86     	; 0x1334 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTD_ID:
			if(direction == 1)
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	a1 f4       	brne	.+40     	; 0x130c <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    12e4:	a1 e3       	ldi	r26, 0x31	; 49
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e1 e3       	ldi	r30, 0x31	; 49
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <GPIO_setupPinDirection+0x194>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <GPIO_setupPinDirection+0x190>
    1306:	84 2b       	or	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRD,pin_num);
    130c:	a1 e3       	ldi	r26, 0x31	; 49
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e1 e3       	ldi	r30, 0x31	; 49
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <GPIO_setupPinDirection+0x1bc>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <GPIO_setupPinDirection+0x1b8>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
		}
	}
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <GPIO_writePin+0x6>
    134a:	00 d0       	rcall	.+0      	; 0x134c <GPIO_writePin+0x8>
    134c:	0f 92       	push	r0
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02
    1356:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	08 f0       	brcs	.+2      	; 0x1360 <GPIO_writePin+0x1c>
    135e:	d5 c0       	rjmp	.+426    	; 0x150a <GPIO_writePin+0x1c6>
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	88 30       	cpi	r24, 0x08	; 8
    1364:	08 f0       	brcs	.+2      	; 0x1368 <GPIO_writePin+0x24>
    1366:	d1 c0       	rjmp	.+418    	; 0x150a <GPIO_writePin+0x1c6>
	{
		/*Do nothing*/
	}else
	{
		switch(port_num)
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3d 83       	std	Y+5, r19	; 0x05
    1370:	2c 83       	std	Y+4, r18	; 0x04
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <GPIO_writePin+0x3a>
    137c:	43 c0       	rjmp	.+134    	; 0x1404 <GPIO_writePin+0xc0>
    137e:	2c 81       	ldd	r18, Y+4	; 0x04
    1380:	3d 81       	ldd	r19, Y+5	; 0x05
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	2c f4       	brge	.+10     	; 0x1392 <GPIO_writePin+0x4e>
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	71 f0       	breq	.+28     	; 0x13ac <GPIO_writePin+0x68>
    1390:	bc c0       	rjmp	.+376    	; 0x150a <GPIO_writePin+0x1c6>
    1392:	2c 81       	ldd	r18, Y+4	; 0x04
    1394:	3d 81       	ldd	r19, Y+5	; 0x05
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	09 f4       	brne	.+2      	; 0x139e <GPIO_writePin+0x5a>
    139c:	5f c0       	rjmp	.+190    	; 0x145c <GPIO_writePin+0x118>
    139e:	8c 81       	ldd	r24, Y+4	; 0x04
    13a0:	9d 81       	ldd	r25, Y+5	; 0x05
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	91 05       	cpc	r25, r1
    13a6:	09 f4       	brne	.+2      	; 0x13aa <GPIO_writePin+0x66>
    13a8:	85 c0       	rjmp	.+266    	; 0x14b4 <GPIO_writePin+0x170>
    13aa:	af c0       	rjmp	.+350    	; 0x150a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == 1)
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	a1 f4       	brne	.+40     	; 0x13da <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    13b2:	ab e3       	ldi	r26, 0x3B	; 59
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	eb e3       	ldi	r30, 0x3B	; 59
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <GPIO_writePin+0x8c>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <GPIO_writePin+0x88>
    13d4:	84 2b       	or	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	98 c0       	rjmp	.+304    	; 0x150a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    13da:	ab e3       	ldi	r26, 0x3B	; 59
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	eb e3       	ldi	r30, 0x3B	; 59
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <GPIO_writePin+0xb4>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <GPIO_writePin+0xb0>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	83 c0       	rjmp	.+262    	; 0x150a <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID:
			if(value == 1)
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	a1 f4       	brne	.+40     	; 0x1432 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    140a:	a8 e3       	ldi	r26, 0x38	; 56
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e8 e3       	ldi	r30, 0x38	; 56
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <GPIO_writePin+0xe4>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <GPIO_writePin+0xe0>
    142c:	84 2b       	or	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	6c c0       	rjmp	.+216    	; 0x150a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    1432:	a8 e3       	ldi	r26, 0x38	; 56
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e8 e3       	ldi	r30, 0x38	; 56
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <GPIO_writePin+0x10c>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <GPIO_writePin+0x108>
    1454:	80 95       	com	r24
    1456:	84 23       	and	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	57 c0       	rjmp	.+174    	; 0x150a <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:
			if(value == 1)
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	a1 f4       	brne	.+40     	; 0x148a <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1462:	a5 e3       	ldi	r26, 0x35	; 53
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e3       	ldi	r30, 0x35	; 53
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_writePin+0x13c>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <GPIO_writePin+0x138>
    1484:	84 2b       	or	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	40 c0       	rjmp	.+128    	; 0x150a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    148a:	a5 e3       	ldi	r26, 0x35	; 53
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e3       	ldi	r30, 0x35	; 53
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <GPIO_writePin+0x164>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <GPIO_writePin+0x160>
    14ac:	80 95       	com	r24
    14ae:	84 23       	and	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	2b c0       	rjmp	.+86     	; 0x150a <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:
			if(value == 1)
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	a1 f4       	brne	.+40     	; 0x14e2 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    14ba:	a2 e3       	ldi	r26, 0x32	; 50
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e2 e3       	ldi	r30, 0x32	; 50
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <GPIO_writePin+0x194>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <GPIO_writePin+0x190>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    14e2:	a2 e3       	ldi	r26, 0x32	; 50
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e2 e3       	ldi	r30, 0x32	; 50
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <GPIO_writePin+0x1bc>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <GPIO_writePin+0x1b8>
    1504:	80 95       	com	r24
    1506:	84 23       	and	r24, r20
    1508:	8c 93       	st	X, r24
		}


	}
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <GPIO_readPin+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <GPIO_readPin+0x8>
    1522:	0f 92       	push	r0
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	88 30       	cpi	r24, 0x08	; 8
    1530:	08 f0       	brcs	.+2      	; 0x1534 <GPIO_readPin+0x1a>
    1532:	85 c0       	rjmp	.+266    	; 0x163e <GPIO_readPin+0x124>
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	08 f0       	brcs	.+2      	; 0x153c <GPIO_readPin+0x22>
    153a:	81 c0       	rjmp	.+258    	; 0x163e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	3d 83       	std	Y+5, r19	; 0x05
    1544:	2c 83       	std	Y+4, r18	; 0x04
    1546:	4c 81       	ldd	r20, Y+4	; 0x04
    1548:	5d 81       	ldd	r21, Y+5	; 0x05
    154a:	41 30       	cpi	r20, 0x01	; 1
    154c:	51 05       	cpc	r21, r1
    154e:	79 f1       	breq	.+94     	; 0x15ae <GPIO_readPin+0x94>
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	82 30       	cpi	r24, 0x02	; 2
    1556:	91 05       	cpc	r25, r1
    1558:	34 f4       	brge	.+12     	; 0x1566 <GPIO_readPin+0x4c>
    155a:	2c 81       	ldd	r18, Y+4	; 0x04
    155c:	3d 81       	ldd	r19, Y+5	; 0x05
    155e:	21 15       	cp	r18, r1
    1560:	31 05       	cpc	r19, r1
    1562:	69 f0       	breq	.+26     	; 0x157e <GPIO_readPin+0x64>
    1564:	6c c0       	rjmp	.+216    	; 0x163e <GPIO_readPin+0x124>
    1566:	4c 81       	ldd	r20, Y+4	; 0x04
    1568:	5d 81       	ldd	r21, Y+5	; 0x05
    156a:	42 30       	cpi	r20, 0x02	; 2
    156c:	51 05       	cpc	r21, r1
    156e:	b9 f1       	breq	.+110    	; 0x15de <GPIO_readPin+0xc4>
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <GPIO_readPin+0x62>
    157a:	49 c0       	rjmp	.+146    	; 0x160e <GPIO_readPin+0xf4>
    157c:	60 c0       	rjmp	.+192    	; 0x163e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA , pin_num) )
    157e:	e9 e3       	ldi	r30, 0x39	; 57
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a9 01       	movw	r20, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_readPin+0x7c>
    1592:	55 95       	asr	r21
    1594:	47 95       	ror	r20
    1596:	8a 95       	dec	r24
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_readPin+0x78>
    159a:	ca 01       	movw	r24, r20
    159c:	81 70       	andi	r24, 0x01	; 1
    159e:	90 70       	andi	r25, 0x00	; 0
    15a0:	88 23       	and	r24, r24
    15a2:	19 f0       	breq	.+6      	; 0x15aa <GPIO_readPin+0x90>
				return 1;
    15a4:	51 e0       	ldi	r21, 0x01	; 1
    15a6:	5b 83       	std	Y+3, r21	; 0x03
    15a8:	4b c0       	rjmp	.+150    	; 0x1640 <GPIO_readPin+0x126>
			else
				return 0;
    15aa:	1b 82       	std	Y+3, r1	; 0x03
    15ac:	49 c0       	rjmp	.+146    	; 0x1640 <GPIO_readPin+0x126>
			break;

		case PORTB_ID:
			if( BIT_IS_SET(PINB , pin_num) )
    15ae:	e6 e3       	ldi	r30, 0x36	; 54
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a9 01       	movw	r20, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_readPin+0xac>
    15c2:	55 95       	asr	r21
    15c4:	47 95       	ror	r20
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_readPin+0xa8>
    15ca:	ca 01       	movw	r24, r20
    15cc:	81 70       	andi	r24, 0x01	; 1
    15ce:	90 70       	andi	r25, 0x00	; 0
    15d0:	88 23       	and	r24, r24
    15d2:	19 f0       	breq	.+6      	; 0x15da <GPIO_readPin+0xc0>
				return 1;
    15d4:	51 e0       	ldi	r21, 0x01	; 1
    15d6:	5b 83       	std	Y+3, r21	; 0x03
    15d8:	33 c0       	rjmp	.+102    	; 0x1640 <GPIO_readPin+0x126>
			else
				return 0;
    15da:	1b 82       	std	Y+3, r1	; 0x03
    15dc:	31 c0       	rjmp	.+98     	; 0x1640 <GPIO_readPin+0x126>
			break;

		case PORTC_ID:
			if( BIT_IS_SET(PINC , pin_num) )
    15de:	e3 e3       	ldi	r30, 0x33	; 51
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a9 01       	movw	r20, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_readPin+0xdc>
    15f2:	55 95       	asr	r21
    15f4:	47 95       	ror	r20
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_readPin+0xd8>
    15fa:	ca 01       	movw	r24, r20
    15fc:	81 70       	andi	r24, 0x01	; 1
    15fe:	90 70       	andi	r25, 0x00	; 0
    1600:	88 23       	and	r24, r24
    1602:	19 f0       	breq	.+6      	; 0x160a <GPIO_readPin+0xf0>
				return 1;
    1604:	51 e0       	ldi	r21, 0x01	; 1
    1606:	5b 83       	std	Y+3, r21	; 0x03
    1608:	1b c0       	rjmp	.+54     	; 0x1640 <GPIO_readPin+0x126>
			else
				return 0;
    160a:	1b 82       	std	Y+3, r1	; 0x03
    160c:	19 c0       	rjmp	.+50     	; 0x1640 <GPIO_readPin+0x126>
			break;

		case PORTD_ID:
			if( BIT_IS_SET(PIND , pin_num) )
    160e:	e0 e3       	ldi	r30, 0x30	; 48
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <GPIO_readPin+0x10c>
    1622:	55 95       	asr	r21
    1624:	47 95       	ror	r20
    1626:	8a 95       	dec	r24
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <GPIO_readPin+0x108>
    162a:	ca 01       	movw	r24, r20
    162c:	81 70       	andi	r24, 0x01	; 1
    162e:	90 70       	andi	r25, 0x00	; 0
    1630:	88 23       	and	r24, r24
    1632:	19 f0       	breq	.+6      	; 0x163a <GPIO_readPin+0x120>
				return 1;
    1634:	51 e0       	ldi	r21, 0x01	; 1
    1636:	5b 83       	std	Y+3, r21	; 0x03
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <GPIO_readPin+0x126>
			else
				return 0;
    163a:	1b 82       	std	Y+3, r1	; 0x03
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <GPIO_readPin+0x126>
			break;
		}
	}
	return 0;
    163e:	1b 82       	std	Y+3, r1	; 0x03
    1640:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <GPIO_setupPortDirection+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <GPIO_setupPortDirection+0x8>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	90 f5       	brcc	.+100    	; 0x16cc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3c 83       	std	Y+4, r19	; 0x04
    1670:	2b 83       	std	Y+3, r18	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	d1 f0       	breq	.+52     	; 0x16b0 <GPIO_setupPortDirection+0x5e>
    167c:	2b 81       	ldd	r18, Y+3	; 0x03
    167e:	3c 81       	ldd	r19, Y+4	; 0x04
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <GPIO_setupPortDirection+0x3e>
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	61 f0       	breq	.+24     	; 0x16a6 <GPIO_setupPortDirection+0x54>
    168e:	1e c0       	rjmp	.+60     	; 0x16cc <GPIO_setupPortDirection+0x7a>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <GPIO_setupPortDirection+0x68>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	81 f0       	breq	.+32     	; 0x16c4 <GPIO_setupPortDirection+0x72>
    16a4:	13 c0       	rjmp	.+38     	; 0x16cc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16a6:	ea e3       	ldi	r30, 0x3A	; 58
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
    16ae:	0e c0       	rjmp	.+28     	; 0x16cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16b0:	e7 e3       	ldi	r30, 0x37	; 55
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 83       	st	Z, r24
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16ba:	e4 e3       	ldi	r30, 0x34	; 52
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	80 83       	st	Z, r24
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16c4:	e1 e3       	ldi	r30, 0x31	; 49
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <GPIO_writePort+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <GPIO_writePort+0x8>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	84 30       	cpi	r24, 0x04	; 4
    16ee:	90 f5       	brcc	.+100    	; 0x1754 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3c 83       	std	Y+4, r19	; 0x04
    16f8:	2b 83       	std	Y+3, r18	; 0x03
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	91 05       	cpc	r25, r1
    1702:	d1 f0       	breq	.+52     	; 0x1738 <GPIO_writePort+0x5e>
    1704:	2b 81       	ldd	r18, Y+3	; 0x03
    1706:	3c 81       	ldd	r19, Y+4	; 0x04
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	2c f4       	brge	.+10     	; 0x1718 <GPIO_writePort+0x3e>
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	61 f0       	breq	.+24     	; 0x172e <GPIO_writePort+0x54>
    1716:	1e c0       	rjmp	.+60     	; 0x1754 <GPIO_writePort+0x7a>
    1718:	2b 81       	ldd	r18, Y+3	; 0x03
    171a:	3c 81       	ldd	r19, Y+4	; 0x04
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	81 f0       	breq	.+32     	; 0x1742 <GPIO_writePort+0x68>
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	91 05       	cpc	r25, r1
    172a:	81 f0       	breq	.+32     	; 0x174c <GPIO_writePort+0x72>
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    172e:	eb e3       	ldi	r30, 0x3B	; 59
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 83       	st	Z, r24
    1736:	0e c0       	rjmp	.+28     	; 0x1754 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1738:	e8 e3       	ldi	r30, 0x38	; 56
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	80 83       	st	Z, r24
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1742:	e5 e3       	ldi	r30, 0x35	; 53
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	80 83       	st	Z, r24
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    174c:	e2 e3       	ldi	r30, 0x32	; 50
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	80 83       	st	Z, r24
			break;
		}
	}
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <GPIO_readPort+0x6>
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_readPort+0x8>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1770:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	84 30       	cpi	r24, 0x04	; 4
    1776:	90 f5       	brcc	.+100    	; 0x17dc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	3c 83       	std	Y+4, r19	; 0x04
    1780:	2b 83       	std	Y+3, r18	; 0x03
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	91 05       	cpc	r25, r1
    178a:	d1 f0       	breq	.+52     	; 0x17c0 <GPIO_readPort+0x5e>
    178c:	2b 81       	ldd	r18, Y+3	; 0x03
    178e:	3c 81       	ldd	r19, Y+4	; 0x04
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	2c f4       	brge	.+10     	; 0x17a0 <GPIO_readPort+0x3e>
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	61 f0       	breq	.+24     	; 0x17b6 <GPIO_readPort+0x54>
    179e:	1e c0       	rjmp	.+60     	; 0x17dc <GPIO_readPort+0x7a>
    17a0:	2b 81       	ldd	r18, Y+3	; 0x03
    17a2:	3c 81       	ldd	r19, Y+4	; 0x04
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	81 f0       	breq	.+32     	; 0x17ca <GPIO_readPort+0x68>
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	91 05       	cpc	r25, r1
    17b2:	81 f0       	breq	.+32     	; 0x17d4 <GPIO_readPort+0x72>
    17b4:	13 c0       	rjmp	.+38     	; 0x17dc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17b6:	e9 e3       	ldi	r30, 0x39	; 57
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	0e c0       	rjmp	.+28     	; 0x17dc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17c0:	e6 e3       	ldi	r30, 0x36	; 54
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17ca:	e3 e3       	ldi	r30, 0x33	; 51
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17d4:	e0 e3       	ldi	r30, 0x30	; 48
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <LCD_sendCommand>:
#include "common_macros.h" /* To use the macros like SET_BIT */



void LCD_sendCommand(uint8 command)
{
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	c3 56       	subi	r28, 0x63	; 99
    17fa:	d0 40       	sbci	r29, 0x00	; 0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	fe 01       	movw	r30, r28
    1808:	ed 59       	subi	r30, 0x9D	; 157
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);     /*write 0 in RS pin */
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	63 e0       	ldi	r22, 0x03	; 3
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    1818:	fe 01       	movw	r30, r28
    181a:	e1 5a       	subi	r30, 0xA1	; 161
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e8       	ldi	r26, 0x80	; 128
    1824:	bf e3       	ldi	r27, 0x3F	; 63
    1826:	80 83       	st	Z, r24
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	a2 83       	std	Z+2, r26	; 0x02
    182c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	8e 01       	movw	r16, r28
    1830:	05 5a       	subi	r16, 0xA5	; 165
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	fe 01       	movw	r30, r28
    1836:	e1 5a       	subi	r30, 0xA1	; 161
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4a e7       	ldi	r20, 0x7A	; 122
    1848:	55 e4       	ldi	r21, 0x45	; 69
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	f8 01       	movw	r30, r16
    1854:	80 83       	st	Z, r24
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	a2 83       	std	Z+2, r26	; 0x02
    185a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    185c:	fe 01       	movw	r30, r28
    185e:	e5 5a       	subi	r30, 0xA5	; 165
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	44 f4       	brge	.+16     	; 0x188a <LCD_sendCommand+0x9e>
		__ticks = 1;
    187a:	fe 01       	movw	r30, r28
    187c:	e7 5a       	subi	r30, 0xA7	; 167
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	64 c0       	rjmp	.+200    	; 0x1952 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    188a:	fe 01       	movw	r30, r28
    188c:	e5 5a       	subi	r30, 0xA5	; 165
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	60 81       	ld	r22, Z
    1892:	71 81       	ldd	r23, Z+1	; 0x01
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18a4:	18 16       	cp	r1, r24
    18a6:	0c f0       	brlt	.+2      	; 0x18aa <LCD_sendCommand+0xbe>
    18a8:	43 c0       	rjmp	.+134    	; 0x1930 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18aa:	fe 01       	movw	r30, r28
    18ac:	e1 5a       	subi	r30, 0xA1	; 161
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e2       	ldi	r20, 0x20	; 32
    18be:	51 e4       	ldi	r21, 0x41	; 65
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	8e 01       	movw	r16, r28
    18ca:	07 5a       	subi	r16, 0xA7	; 167
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	f8 01       	movw	r30, r16
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	1f c0       	rjmp	.+62     	; 0x1920 <LCD_sendCommand+0x134>
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 5a       	subi	r30, 0xA9	; 169
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 e9       	ldi	r24, 0x90	; 144
    18ea:	91 e0       	ldi	r25, 0x01	; 1
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f0:	fe 01       	movw	r30, r28
    18f2:	e9 5a       	subi	r30, 0xA9	; 169
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <LCD_sendCommand+0x10e>
    18fe:	fe 01       	movw	r30, r28
    1900:	e9 5a       	subi	r30, 0xA9	; 169
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	de 01       	movw	r26, r28
    190a:	a7 5a       	subi	r26, 0xA7	; 167
    190c:	bf 4f       	sbci	r27, 0xFF	; 255
    190e:	fe 01       	movw	r30, r28
    1910:	e7 5a       	subi	r30, 0xA7	; 167
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	11 96       	adiw	r26, 0x01	; 1
    191c:	9c 93       	st	X, r25
    191e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1920:	fe 01       	movw	r30, r28
    1922:	e7 5a       	subi	r30, 0xA7	; 167
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	d1 f6       	brne	.-76     	; 0x18e2 <LCD_sendCommand+0xf6>
    192e:	27 c0       	rjmp	.+78     	; 0x197e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1930:	8e 01       	movw	r16, r28
    1932:	07 5a       	subi	r16, 0xA7	; 167
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
    1936:	fe 01       	movw	r30, r28
    1938:	e5 5a       	subi	r30, 0xA5	; 165
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	60 81       	ld	r22, Z
    193e:	71 81       	ldd	r23, Z+1	; 0x01
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	f8 01       	movw	r30, r16
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
    1952:	de 01       	movw	r26, r28
    1954:	ab 5a       	subi	r26, 0xAB	; 171
    1956:	bf 4f       	sbci	r27, 0xFF	; 255
    1958:	fe 01       	movw	r30, r28
    195a:	e7 5a       	subi	r30, 0xA7	; 167
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	8d 93       	st	X+, r24
    1964:	9c 93       	st	X, r25
    1966:	fe 01       	movw	r30, r28
    1968:	eb 5a       	subi	r30, 0xAB	; 171
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_sendCommand+0x184>
    1974:	fe 01       	movw	r30, r28
    1976:	eb 5a       	subi	r30, 0xAB	; 171
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);   /*write 1 in enable pin */
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    1988:	fe 01       	movw	r30, r28
    198a:	ef 5a       	subi	r30, 0xAF	; 175
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a0 e8       	ldi	r26, 0x80	; 128
    1994:	bf e3       	ldi	r27, 0x3F	; 63
    1996:	80 83       	st	Z, r24
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	a2 83       	std	Z+2, r26	; 0x02
    199c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199e:	8e 01       	movw	r16, r28
    19a0:	03 5b       	subi	r16, 0xB3	; 179
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	fe 01       	movw	r30, r28
    19a6:	ef 5a       	subi	r30, 0xAF	; 175
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a e7       	ldi	r20, 0x7A	; 122
    19b8:	55 e4       	ldi	r21, 0x45	; 69
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	f8 01       	movw	r30, r16
    19c4:	80 83       	st	Z, r24
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	a2 83       	std	Z+2, r26	; 0x02
    19ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19cc:	fe 01       	movw	r30, r28
    19ce:	e3 5b       	subi	r30, 0xB3	; 179
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	44 f4       	brge	.+16     	; 0x19fa <LCD_sendCommand+0x20e>
		__ticks = 1;
    19ea:	fe 01       	movw	r30, r28
    19ec:	e5 5b       	subi	r30, 0xB5	; 181
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
    19f8:	64 c0       	rjmp	.+200    	; 0x1ac2 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    19fa:	fe 01       	movw	r30, r28
    19fc:	e3 5b       	subi	r30, 0xB3	; 179
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	0c f0       	brlt	.+2      	; 0x1a1a <LCD_sendCommand+0x22e>
    1a18:	43 c0       	rjmp	.+134    	; 0x1aa0 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ef 5a       	subi	r30, 0xAF	; 175
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8e 01       	movw	r16, r28
    1a3a:	05 5b       	subi	r16, 0xB5	; 181
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
    1a50:	1f c0       	rjmp	.+62     	; 0x1a90 <LCD_sendCommand+0x2a4>
    1a52:	fe 01       	movw	r30, r28
    1a54:	e7 5b       	subi	r30, 0xB7	; 183
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 e9       	ldi	r24, 0x90	; 144
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	fe 01       	movw	r30, r28
    1a62:	e7 5b       	subi	r30, 0xB7	; 183
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 81       	ld	r24, Z
    1a68:	91 81       	ldd	r25, Z+1	; 0x01
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <LCD_sendCommand+0x27e>
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e7 5b       	subi	r30, 0xB7	; 183
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	de 01       	movw	r26, r28
    1a7a:	a5 5b       	subi	r26, 0xB5	; 181
    1a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e5 5b       	subi	r30, 0xB5	; 181
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	11 96       	adiw	r26, 0x01	; 1
    1a8c:	9c 93       	st	X, r25
    1a8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a90:	fe 01       	movw	r30, r28
    1a92:	e5 5b       	subi	r30, 0xB5	; 181
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	d1 f6       	brne	.-76     	; 0x1a52 <LCD_sendCommand+0x266>
    1a9e:	27 c0       	rjmp	.+78     	; 0x1aee <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	05 5b       	subi	r16, 0xB5	; 181
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e3 5b       	subi	r30, 0xB3	; 179
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	de 01       	movw	r26, r28
    1ac4:	a9 5b       	subi	r26, 0xB9	; 185
    1ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e5 5b       	subi	r30, 0xB5	; 181
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	8d 93       	st	X+, r24
    1ad4:	9c 93       	st	X, r25
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e9 5b       	subi	r30, 0xB9	; 185
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_sendCommand+0x2f4>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e9 5b       	subi	r30, 0xB9	; 185
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	80 83       	st	Z, r24

	_delay_ms(1);

#else

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(command,4) );
    1aee:	fe 01       	movw	r30, r28
    1af0:	ed 59       	subi	r30, 0x9D	; 157
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	80 71       	andi	r24, 0x10	; 16
    1afc:	90 70       	andi	r25, 0x00	; 0
    1afe:	95 95       	asr	r25
    1b00:	87 95       	ror	r24
    1b02:	95 95       	asr	r25
    1b04:	87 95       	ror	r24
    1b06:	95 95       	asr	r25
    1b08:	87 95       	ror	r24
    1b0a:	95 95       	asr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	98 2f       	mov	r25, r24
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	49 2f       	mov	r20, r25
    1b16:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(command,5) );
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ed 59       	subi	r30, 0x9D	; 157
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 81       	ld	r24, Z
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	80 72       	andi	r24, 0x20	; 32
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	95 95       	asr	r25
    1b2c:	87 95       	ror	r24
    1b2e:	95 95       	asr	r25
    1b30:	87 95       	ror	r24
    1b32:	95 95       	asr	r25
    1b34:	87 95       	ror	r24
    1b36:	95 95       	asr	r25
    1b38:	87 95       	ror	r24
    1b3a:	95 95       	asr	r25
    1b3c:	87 95       	ror	r24
    1b3e:	98 2f       	mov	r25, r24
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	49 2f       	mov	r20, r25
    1b46:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(command,6) );
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	ed 59       	subi	r30, 0x9D	; 157
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	80 74       	andi	r24, 0x40	; 64
    1b58:	90 70       	andi	r25, 0x00	; 0
    1b5a:	08 2e       	mov	r0, r24
    1b5c:	89 2f       	mov	r24, r25
    1b5e:	00 0c       	add	r0, r0
    1b60:	88 1f       	adc	r24, r24
    1b62:	99 0b       	sbc	r25, r25
    1b64:	00 0c       	add	r0, r0
    1b66:	88 1f       	adc	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	49 2f       	mov	r20, r25
    1b72:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(command,7) );
    1b76:	fe 01       	movw	r30, r28
    1b78:	ed 59       	subi	r30, 0x9D	; 157
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 81       	ld	r24, Z
    1b7e:	98 2f       	mov	r25, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	99 27       	eor	r25, r25
    1b84:	99 1f       	adc	r25, r25
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	64 e0       	ldi	r22, 0x04	; 4
    1b8a:	49 2f       	mov	r20, r25
    1b8c:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    1b90:	fe 01       	movw	r30, r28
    1b92:	ed 5b       	subi	r30, 0xBD	; 189
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 e8       	ldi	r26, 0x80	; 128
    1b9c:	bf e3       	ldi	r27, 0x3F	; 63
    1b9e:	80 83       	st	Z, r24
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	a2 83       	std	Z+2, r26	; 0x02
    1ba4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	8e 01       	movw	r16, r28
    1ba8:	01 5c       	subi	r16, 0xC1	; 193
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	fe 01       	movw	r30, r28
    1bae:	ed 5b       	subi	r30, 0xBD	; 189
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	4a e7       	ldi	r20, 0x7A	; 122
    1bc0:	55 e4       	ldi	r21, 0x45	; 69
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	f8 01       	movw	r30, r16
    1bcc:	80 83       	st	Z, r24
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	a2 83       	std	Z+2, r26	; 0x02
    1bd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	ff 96       	adiw	r30, 0x3f	; 63
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <LCD_sendCommand+0x40e>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9e af       	std	Y+62, r25	; 0x3e
    1bf6:	8d af       	std	Y+61, r24	; 0x3d
    1bf8:	46 c0       	rjmp	.+140    	; 0x1c86 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ff 96       	adiw	r30, 0x3f	; 63
    1bfe:	60 81       	ld	r22, Z
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	64 f5       	brge	.+88     	; 0x1c6e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	fe 01       	movw	r30, r28
    1c18:	ed 5b       	subi	r30, 0xBD	; 189
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e2       	ldi	r20, 0x20	; 32
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9e af       	std	Y+62, r25	; 0x3e
    1c42:	8d af       	std	Y+61, r24	; 0x3d
    1c44:	0f c0       	rjmp	.+30     	; 0x1c64 <LCD_sendCommand+0x478>
    1c46:	80 e9       	ldi	r24, 0x90	; 144
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	9c af       	std	Y+60, r25	; 0x3c
    1c4c:	8b af       	std	Y+59, r24	; 0x3b
    1c4e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c50:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_sendCommand+0x466>
    1c56:	9c af       	std	Y+60, r25	; 0x3c
    1c58:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	9e af       	std	Y+62, r25	; 0x3e
    1c62:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	69 f7       	brne	.-38     	; 0x1c46 <LCD_sendCommand+0x45a>
    1c6c:	16 c0       	rjmp	.+44     	; 0x1c9a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6e:	fe 01       	movw	r30, r28
    1c70:	ff 96       	adiw	r30, 0x3f	; 63
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9e af       	std	Y+62, r25	; 0x3e
    1c84:	8d af       	std	Y+61, r24	; 0x3d
    1c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c8a:	9a af       	std	Y+58, r25	; 0x3a
    1c8c:	89 af       	std	Y+57, r24	; 0x39
    1c8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <LCD_sendCommand+0x4a6>
    1c96:	9a af       	std	Y+58, r25	; 0x3a
    1c98:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /*write 0 in enable pin to make falling edge*/
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	62 e0       	ldi	r22, 0x02	; 2
    1c9e:	40 e0       	ldi	r20, 0x00	; 0
    1ca0:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a0 e8       	ldi	r26, 0x80	; 128
    1caa:	bf e3       	ldi	r27, 0x3F	; 63
    1cac:	8d ab       	std	Y+53, r24	; 0x35
    1cae:	9e ab       	std	Y+54, r25	; 0x36
    1cb0:	af ab       	std	Y+55, r26	; 0x37
    1cb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cba:	98 ad       	ldd	r25, Y+56	; 0x38
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	4a e7       	ldi	r20, 0x7A	; 122
    1cc2:	55 e4       	ldi	r21, 0x45	; 69
    1cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	89 ab       	std	Y+49, r24	; 0x31
    1cce:	9a ab       	std	Y+50, r25	; 0x32
    1cd0:	ab ab       	std	Y+51, r26	; 0x33
    1cd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cd4:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd6:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cda:	9c a9       	ldd	r25, Y+52	; 0x34
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	98 ab       	std	Y+48, r25	; 0x30
    1cf2:	8f a7       	std	Y+47, r24	; 0x2f
    1cf4:	3f c0       	rjmp	.+126    	; 0x1d74 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1cf6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	3f ef       	ldi	r19, 0xFF	; 255
    1d02:	4f e7       	ldi	r20, 0x7F	; 127
    1d04:	57 e4       	ldi	r21, 0x47	; 71
    1d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	4c f5       	brge	.+82     	; 0x1d60 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d10:	7e a9       	ldd	r23, Y+54	; 0x36
    1d12:	8f a9       	ldd	r24, Y+55	; 0x37
    1d14:	98 ad       	ldd	r25, Y+56	; 0x38
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e2       	ldi	r20, 0x20	; 32
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	98 ab       	std	Y+48, r25	; 0x30
    1d34:	8f a7       	std	Y+47, r24	; 0x2f
    1d36:	0f c0       	rjmp	.+30     	; 0x1d56 <LCD_sendCommand+0x56a>
    1d38:	80 e9       	ldi	r24, 0x90	; 144
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	9e a7       	std	Y+46, r25	; 0x2e
    1d3e:	8d a7       	std	Y+45, r24	; 0x2d
    1d40:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d42:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_sendCommand+0x558>
    1d48:	9e a7       	std	Y+46, r25	; 0x2e
    1d4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	98 ab       	std	Y+48, r25	; 0x30
    1d54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d58:	98 a9       	ldd	r25, Y+48	; 0x30
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <LCD_sendCommand+0x54c>
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d60:	69 a9       	ldd	r22, Y+49	; 0x31
    1d62:	7a a9       	ldd	r23, Y+50	; 0x32
    1d64:	8b a9       	ldd	r24, Y+51	; 0x33
    1d66:	9c a9       	ldd	r25, Y+52	; 0x34
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	98 ab       	std	Y+48, r25	; 0x30
    1d72:	8f a7       	std	Y+47, r24	; 0x2f
    1d74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d76:	98 a9       	ldd	r25, Y+48	; 0x30
    1d78:	9c a7       	std	Y+44, r25	; 0x2c
    1d7a:	8b a7       	std	Y+43, r24	; 0x2b
    1d7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <LCD_sendCommand+0x594>
    1d84:	9c a7       	std	Y+44, r25	; 0x2c
    1d86:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /*write 1 in enable pin */
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a0 e8       	ldi	r26, 0x80	; 128
    1d98:	bf e3       	ldi	r27, 0x3F	; 63
    1d9a:	8f a3       	std	Y+39, r24	; 0x27
    1d9c:	98 a7       	std	Y+40, r25	; 0x28
    1d9e:	a9 a7       	std	Y+41, r26	; 0x29
    1da0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da2:	6f a1       	ldd	r22, Y+39	; 0x27
    1da4:	78 a5       	ldd	r23, Y+40	; 0x28
    1da6:	89 a5       	ldd	r24, Y+41	; 0x29
    1da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a e7       	ldi	r20, 0x7A	; 122
    1db0:	55 e4       	ldi	r21, 0x45	; 69
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	8b a3       	std	Y+35, r24	; 0x23
    1dbc:	9c a3       	std	Y+36, r25	; 0x24
    1dbe:	ad a3       	std	Y+37, r26	; 0x25
    1dc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e8       	ldi	r20, 0x80	; 128
    1dd0:	5f e3       	ldi	r21, 0x3F	; 63
    1dd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd6:	88 23       	and	r24, r24
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9a a3       	std	Y+34, r25	; 0x22
    1de0:	89 a3       	std	Y+33, r24	; 0x21
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1de4:	6b a1       	ldd	r22, Y+35	; 0x23
    1de6:	7c a1       	ldd	r23, Y+36	; 0x24
    1de8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dea:	9e a1       	ldd	r25, Y+38	; 0x26
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	4c f5       	brge	.+82     	; 0x1e4e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfe:	78 a5       	ldd	r23, Y+40	; 0x28
    1e00:	89 a5       	ldd	r24, Y+41	; 0x29
    1e02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e2       	ldi	r20, 0x20	; 32
    1e0a:	51 e4       	ldi	r21, 0x41	; 65
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9a a3       	std	Y+34, r25	; 0x22
    1e22:	89 a3       	std	Y+33, r24	; 0x21
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <LCD_sendCommand+0x658>
    1e26:	80 e9       	ldi	r24, 0x90	; 144
    1e28:	91 e0       	ldi	r25, 0x01	; 1
    1e2a:	98 a3       	std	Y+32, r25	; 0x20
    1e2c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e30:	98 a1       	ldd	r25, Y+32	; 0x20
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_sendCommand+0x646>
    1e36:	98 a3       	std	Y+32, r25	; 0x20
    1e38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	9a a3       	std	Y+34, r25	; 0x22
    1e42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	89 a1       	ldd	r24, Y+33	; 0x21
    1e46:	9a a1       	ldd	r25, Y+34	; 0x22
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <LCD_sendCommand+0x63a>
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e50:	7c a1       	ldd	r23, Y+36	; 0x24
    1e52:	8d a1       	ldd	r24, Y+37	; 0x25
    1e54:	9e a1       	ldd	r25, Y+38	; 0x26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9a a3       	std	Y+34, r25	; 0x22
    1e60:	89 a3       	std	Y+33, r24	; 0x21
    1e62:	89 a1       	ldd	r24, Y+33	; 0x21
    1e64:	9a a1       	ldd	r25, Y+34	; 0x22
    1e66:	9e 8f       	std	Y+30, r25	; 0x1e
    1e68:	8d 8f       	std	Y+29, r24	; 0x1d
    1e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_sendCommand+0x682>
    1e72:	9e 8f       	std	Y+30, r25	; 0x1e
    1e74:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(command,0) );
    1e76:	fe 01       	movw	r30, r28
    1e78:	ed 59       	subi	r30, 0x9D	; 157
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	98 2f       	mov	r25, r24
    1e80:	91 70       	andi	r25, 0x01	; 1
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	49 2f       	mov	r20, r25
    1e88:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(command,1) );
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ed 59       	subi	r30, 0x9D	; 157
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	82 70       	andi	r24, 0x02	; 2
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	95 95       	asr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	98 2f       	mov	r25, r24
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	61 e0       	ldi	r22, 0x01	; 1
    1ea6:	49 2f       	mov	r20, r25
    1ea8:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(command,2) );
    1eac:	fe 01       	movw	r30, r28
    1eae:	ed 59       	subi	r30, 0x9D	; 157
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	84 70       	andi	r24, 0x04	; 4
    1eba:	90 70       	andi	r25, 0x00	; 0
    1ebc:	95 95       	asr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	95 95       	asr	r25
    1ec2:	87 95       	ror	r24
    1ec4:	98 2f       	mov	r25, r24
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	62 e0       	ldi	r22, 0x02	; 2
    1eca:	49 2f       	mov	r20, r25
    1ecc:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(command,3) );
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ed 59       	subi	r30, 0x9D	; 157
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	88 70       	andi	r24, 0x08	; 8
    1ede:	90 70       	andi	r25, 0x00	; 0
    1ee0:	95 95       	asr	r25
    1ee2:	87 95       	ror	r24
    1ee4:	95 95       	asr	r25
    1ee6:	87 95       	ror	r24
    1ee8:	95 95       	asr	r25
    1eea:	87 95       	ror	r24
    1eec:	98 2f       	mov	r25, r24
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	64 e0       	ldi	r22, 0x04	; 4
    1ef2:	49 2f       	mov	r20, r25
    1ef4:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e8       	ldi	r26, 0x80	; 128
    1efe:	bf e3       	ldi	r27, 0x3F	; 63
    1f00:	89 8f       	std	Y+25, r24	; 0x19
    1f02:	9a 8f       	std	Y+26, r25	; 0x1a
    1f04:	ab 8f       	std	Y+27, r26	; 0x1b
    1f06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a e7       	ldi	r20, 0x7A	; 122
    1f16:	55 e4       	ldi	r21, 0x45	; 69
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8d 8b       	std	Y+21, r24	; 0x15
    1f22:	9e 8b       	std	Y+22, r25	; 0x16
    1f24:	af 8b       	std	Y+23, r26	; 0x17
    1f26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f28:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <LCD_sendCommand+0x75e>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 8b       	std	Y+20, r25	; 0x14
    1f46:	8b 8b       	std	Y+19, r24	; 0x13
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f50:	98 8d       	ldd	r25, Y+24	; 0x18
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <LCD_sendCommand+0x7be>
    1f8c:	80 e9       	ldi	r24, 0x90	; 144
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	9a 8b       	std	Y+18, r25	; 0x12
    1f92:	89 8b       	std	Y+17, r24	; 0x11
    1f94:	89 89       	ldd	r24, Y+17	; 0x11
    1f96:	9a 89       	ldd	r25, Y+18	; 0x12
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_sendCommand+0x7ac>
    1f9c:	9a 8b       	std	Y+18, r25	; 0x12
    1f9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9c 8b       	std	Y+20, r25	; 0x14
    1fa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8b 89       	ldd	r24, Y+19	; 0x13
    1fac:	9c 89       	ldd	r25, Y+20	; 0x14
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <LCD_sendCommand+0x7a0>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fba:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9c 8b       	std	Y+20, r25	; 0x14
    1fc6:	8b 8b       	std	Y+19, r24	; 0x13
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	98 8b       	std	Y+16, r25	; 0x10
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
    1fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd2:	98 89       	ldd	r25, Y+16	; 0x10
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_sendCommand+0x7e8>
    1fd8:	98 8b       	std	Y+16, r25	; 0x10
    1fda:	8f 87       	std	Y+15, r24	; 0x0f



#endif

	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	62 e0       	ldi	r22, 0x02	; 2
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e8       	ldi	r26, 0x80	; 128
    1fec:	bf e3       	ldi	r27, 0x3F	; 63
    1fee:	8b 87       	std	Y+11, r24	; 0x0b
    1ff0:	9c 87       	std	Y+12, r25	; 0x0c
    1ff2:	ad 87       	std	Y+13, r26	; 0x0d
    1ff4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	4a e7       	ldi	r20, 0x7A	; 122
    2004:	55 e4       	ldi	r21, 0x45	; 69
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	8f 83       	std	Y+7, r24	; 0x07
    2010:	98 87       	std	Y+8, r25	; 0x08
    2012:	a9 87       	std	Y+9, r26	; 0x09
    2014:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2016:	6f 81       	ldd	r22, Y+7	; 0x07
    2018:	78 85       	ldd	r23, Y+8	; 0x08
    201a:	89 85       	ldd	r24, Y+9	; 0x09
    201c:	9a 85       	ldd	r25, Y+10	; 0x0a
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e8       	ldi	r20, 0x80	; 128
    2024:	5f e3       	ldi	r21, 0x3F	; 63
    2026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202a:	88 23       	and	r24, r24
    202c:	2c f4       	brge	.+10     	; 0x2038 <LCD_sendCommand+0x84c>
		__ticks = 1;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	3f c0       	rjmp	.+126    	; 0x20b6 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2038:	6f 81       	ldd	r22, Y+7	; 0x07
    203a:	78 85       	ldd	r23, Y+8	; 0x08
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	3f ef       	ldi	r19, 0xFF	; 255
    2044:	4f e7       	ldi	r20, 0x7F	; 127
    2046:	57 e4       	ldi	r21, 0x47	; 71
    2048:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204c:	18 16       	cp	r1, r24
    204e:	4c f5       	brge	.+82     	; 0x20a2 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2050:	6b 85       	ldd	r22, Y+11	; 0x0b
    2052:	7c 85       	ldd	r23, Y+12	; 0x0c
    2054:	8d 85       	ldd	r24, Y+13	; 0x0d
    2056:	9e 85       	ldd	r25, Y+14	; 0x0e
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e2       	ldi	r20, 0x20	; 32
    205e:	51 e4       	ldi	r21, 0x41	; 65
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <LCD_sendCommand+0x8ac>
    207a:	80 e9       	ldi	r24, 0x90	; 144
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	8b 83       	std	Y+3, r24	; 0x03
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_sendCommand+0x89a>
    208a:	9c 83       	std	Y+4, r25	; 0x04
    208c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	69 f7       	brne	.-38     	; 0x207a <LCD_sendCommand+0x88e>
    20a0:	14 c0       	rjmp	.+40     	; 0x20ca <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a2:	6f 81       	ldd	r22, Y+7	; 0x07
    20a4:	78 85       	ldd	r23, Y+8	; 0x08
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_sendCommand+0x8d6>
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	/*write  0 in enable pin beacase LCD read the at falling edge of enable, so we make it 1 then 0*/

	_delay_ms(1);
}
    20ca:	cd 59       	subi	r28, 0x9D	; 157
    20cc:	df 4f       	sbci	r29, 0xFF	; 255
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <LCD_init>:


void LCD_init(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	6c 97       	sbiw	r28, 0x1c	; 28
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,OUTPUT);/*make enable output*/
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	62 e0       	ldi	r22, 0x02	; 2
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,OUTPUT);/*make RS  output*/
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	63 e0       	ldi	r22, 0x03	; 3
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a0 ea       	ldi	r26, 0xA0	; 160
    2110:	b1 e4       	ldi	r27, 0x41	; 65
    2112:	89 8f       	std	Y+25, r24	; 0x19
    2114:	9a 8f       	std	Y+26, r25	; 0x1a
    2116:	ab 8f       	std	Y+27, r26	; 0x1b
    2118:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	69 8d       	ldd	r22, Y+25	; 0x19
    211c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a e7       	ldi	r20, 0x7A	; 122
    2128:	55 e4       	ldi	r21, 0x45	; 69
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8d 8b       	std	Y+21, r24	; 0x15
    2134:	9e 8b       	std	Y+22, r25	; 0x16
    2136:	af 8b       	std	Y+23, r26	; 0x17
    2138:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    213a:	6d 89       	ldd	r22, Y+21	; 0x15
    213c:	7e 89       	ldd	r23, Y+22	; 0x16
    213e:	8f 89       	ldd	r24, Y+23	; 0x17
    2140:	98 8d       	ldd	r25, Y+24	; 0x18
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	2c f4       	brge	.+10     	; 0x215c <LCD_init+0x7a>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9c 8b       	std	Y+20, r25	; 0x14
    2158:	8b 8b       	std	Y+19, r24	; 0x13
    215a:	3f c0       	rjmp	.+126    	; 0x21da <LCD_init+0xf8>
	else if (__tmp > 65535)
    215c:	6d 89       	ldd	r22, Y+21	; 0x15
    215e:	7e 89       	ldd	r23, Y+22	; 0x16
    2160:	8f 89       	ldd	r24, Y+23	; 0x17
    2162:	98 8d       	ldd	r25, Y+24	; 0x18
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	4c f5       	brge	.+82     	; 0x21c6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	69 8d       	ldd	r22, Y+25	; 0x19
    2176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e2       	ldi	r20, 0x20	; 32
    2182:	51 e4       	ldi	r21, 0x41	; 65
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <LCD_init+0xda>
    219e:	80 e9       	ldi	r24, 0x90	; 144
    21a0:	91 e0       	ldi	r25, 0x01	; 1
    21a2:	9a 8b       	std	Y+18, r25	; 0x12
    21a4:	89 8b       	std	Y+17, r24	; 0x11
    21a6:	89 89       	ldd	r24, Y+17	; 0x11
    21a8:	9a 89       	ldd	r25, Y+18	; 0x12
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <LCD_init+0xc8>
    21ae:	9a 8b       	std	Y+18, r25	; 0x12
    21b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	8b 89       	ldd	r24, Y+19	; 0x13
    21b4:	9c 89       	ldd	r25, Y+20	; 0x14
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	9c 8b       	std	Y+20, r25	; 0x14
    21ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	8b 89       	ldd	r24, Y+19	; 0x13
    21be:	9c 89       	ldd	r25, Y+20	; 0x14
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	69 f7       	brne	.-38     	; 0x219e <LCD_init+0xbc>
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c6:	6d 89       	ldd	r22, Y+21	; 0x15
    21c8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ca:	8f 89       	ldd	r24, Y+23	; 0x17
    21cc:	98 8d       	ldd	r25, Y+24	; 0x18
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9c 8b       	std	Y+20, r25	; 0x14
    21d8:	8b 8b       	std	Y+19, r24	; 0x13
    21da:	8b 89       	ldd	r24, Y+19	; 0x13
    21dc:	9c 89       	ldd	r25, Y+20	; 0x14
    21de:	98 8b       	std	Y+16, r25	; 0x10
    21e0:	8f 87       	std	Y+15, r24	; 0x0f
    21e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e4:	98 89       	ldd	r25, Y+16	; 0x10
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <LCD_init+0x104>
    21ea:	98 8b       	std	Y+16, r25	; 0x10
    21ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);  /*make LCD 8 bit mode and 2 line*/


#else
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN4 , OUTPUT);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN5 , OUTPUT);
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	41 e0       	ldi	r20, 0x01	; 1
    21fe:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN6 , OUTPUT);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN7 , OUTPUT);
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	64 e0       	ldi	r22, 0x04	; 4
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 ea       	ldi	r26, 0xA0	; 160
    221c:	b1 e4       	ldi	r27, 0x41	; 65
    221e:	8b 87       	std	Y+11, r24	; 0x0b
    2220:	9c 87       	std	Y+12, r25	; 0x0c
    2222:	ad 87       	std	Y+13, r26	; 0x0d
    2224:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	6b 85       	ldd	r22, Y+11	; 0x0b
    2228:	7c 85       	ldd	r23, Y+12	; 0x0c
    222a:	8d 85       	ldd	r24, Y+13	; 0x0d
    222c:	9e 85       	ldd	r25, Y+14	; 0x0e
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a e7       	ldi	r20, 0x7A	; 122
    2234:	55 e4       	ldi	r21, 0x45	; 69
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8f 83       	std	Y+7, r24	; 0x07
    2240:	98 87       	std	Y+8, r25	; 0x08
    2242:	a9 87       	std	Y+9, r26	; 0x09
    2244:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <LCD_init+0x186>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <LCD_init+0x204>
	else if (__tmp > 65535)
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	6b 85       	ldd	r22, Y+11	; 0x0b
    2282:	7c 85       	ldd	r23, Y+12	; 0x0c
    2284:	8d 85       	ldd	r24, Y+13	; 0x0d
    2286:	9e 85       	ldd	r25, Y+14	; 0x0e
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	8d 83       	std	Y+5, r24	; 0x05
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <LCD_init+0x1e6>
    22aa:	80 e9       	ldi	r24, 0x90	; 144
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	9c 83       	std	Y+4, r25	; 0x04
    22b0:	8b 83       	std	Y+3, r24	; 0x03
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_init+0x1d4>
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <LCD_init+0x1c8>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_init+0x210>
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01
	/*make last 4 pins in portc output*/
	_delay_ms(20);
	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    22fa:	83 e3       	ldi	r24, 0x33	; 51
    22fc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2300:	82 e3       	ldi	r24, 0x32	; 50
    2302:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2306:	88 e2       	ldi	r24, 0x28	; 40
    2308:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_sendCommand>

#endif


	LCD_sendCommand(LCD_CURSOR_OFF);
    230c:	8c e0       	ldi	r24, 0x0C	; 12
    230e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_sendCommand>

}
    2318:	6c 96       	adiw	r28, 0x1c	; 28
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <LCD_writeChar>:

void LCD_writeChar(uint8 ch)
{
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	c3 56       	subi	r28, 0x63	; 99
    2338:	d0 40       	sbci	r29, 0x00	; 0
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	fe 01       	movw	r30, r28
    2346:	ed 59       	subi	r30, 0x9D	; 157
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 83       	st	Z, r24
	  GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);     /*write 1 in RS pin */
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	63 e0       	ldi	r22, 0x03	; 3
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    2356:	fe 01       	movw	r30, r28
    2358:	e1 5a       	subi	r30, 0xA1	; 161
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a0 e8       	ldi	r26, 0x80	; 128
    2362:	bf e3       	ldi	r27, 0x3F	; 63
    2364:	80 83       	st	Z, r24
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	a2 83       	std	Z+2, r26	; 0x02
    236a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	8e 01       	movw	r16, r28
    236e:	05 5a       	subi	r16, 0xA5	; 165
    2370:	1f 4f       	sbci	r17, 0xFF	; 255
    2372:	fe 01       	movw	r30, r28
    2374:	e1 5a       	subi	r30, 0xA1	; 161
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a e7       	ldi	r20, 0x7A	; 122
    2386:	55 e4       	ldi	r21, 0x45	; 69
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	f8 01       	movw	r30, r16
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	a2 83       	std	Z+2, r26	; 0x02
    2398:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    239a:	fe 01       	movw	r30, r28
    239c:	e5 5a       	subi	r30, 0xA5	; 165
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	60 81       	ld	r22, Z
    23a2:	71 81       	ldd	r23, Z+1	; 0x01
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	44 f4       	brge	.+16     	; 0x23c8 <LCD_writeChar+0x9e>
		__ticks = 1;
    23b8:	fe 01       	movw	r30, r28
    23ba:	e7 5a       	subi	r30, 0xA7	; 167
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
    23c6:	64 c0       	rjmp	.+200    	; 0x2490 <LCD_writeChar+0x166>
	else if (__tmp > 65535)
    23c8:	fe 01       	movw	r30, r28
    23ca:	e5 5a       	subi	r30, 0xA5	; 165
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	57 e4       	ldi	r21, 0x47	; 71
    23de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	0c f0       	brlt	.+2      	; 0x23e8 <LCD_writeChar+0xbe>
    23e6:	43 c0       	rjmp	.+134    	; 0x246e <LCD_writeChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	fe 01       	movw	r30, r28
    23ea:	e1 5a       	subi	r30, 0xA1	; 161
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8e 01       	movw	r16, r28
    2408:	07 5a       	subi	r16, 0xA7	; 167
    240a:	1f 4f       	sbci	r17, 0xFF	; 255
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	f8 01       	movw	r30, r16
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
    241e:	1f c0       	rjmp	.+62     	; 0x245e <LCD_writeChar+0x134>
    2420:	fe 01       	movw	r30, r28
    2422:	e9 5a       	subi	r30, 0xA9	; 169
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 e9       	ldi	r24, 0x90	; 144
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	80 83       	st	Z, r24
    242e:	fe 01       	movw	r30, r28
    2430:	e9 5a       	subi	r30, 0xA9	; 169
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_writeChar+0x10e>
    243c:	fe 01       	movw	r30, r28
    243e:	e9 5a       	subi	r30, 0xA9	; 169
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	de 01       	movw	r26, r28
    2448:	a7 5a       	subi	r26, 0xA7	; 167
    244a:	bf 4f       	sbci	r27, 0xFF	; 255
    244c:	fe 01       	movw	r30, r28
    244e:	e7 5a       	subi	r30, 0xA7	; 167
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	11 96       	adiw	r26, 0x01	; 1
    245a:	9c 93       	st	X, r25
    245c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	fe 01       	movw	r30, r28
    2460:	e7 5a       	subi	r30, 0xA7	; 167
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	d1 f6       	brne	.-76     	; 0x2420 <LCD_writeChar+0xf6>
    246c:	27 c0       	rjmp	.+78     	; 0x24bc <LCD_writeChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246e:	8e 01       	movw	r16, r28
    2470:	07 5a       	subi	r16, 0xA7	; 167
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	fe 01       	movw	r30, r28
    2476:	e5 5a       	subi	r30, 0xA5	; 165
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	f8 01       	movw	r30, r16
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	80 83       	st	Z, r24
    2490:	de 01       	movw	r26, r28
    2492:	ab 5a       	subi	r26, 0xAB	; 171
    2494:	bf 4f       	sbci	r27, 0xFF	; 255
    2496:	fe 01       	movw	r30, r28
    2498:	e7 5a       	subi	r30, 0xA7	; 167
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	8d 93       	st	X+, r24
    24a2:	9c 93       	st	X, r25
    24a4:	fe 01       	movw	r30, r28
    24a6:	eb 5a       	subi	r30, 0xAB	; 171
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_writeChar+0x184>
    24b2:	fe 01       	movw	r30, r28
    24b4:	eb 5a       	subi	r30, 0xAB	; 171
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
			_delay_ms(1);

			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);   /*write 1 in enable pin */
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	62 e0       	ldi	r22, 0x02	; 2
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    24c6:	fe 01       	movw	r30, r28
    24c8:	ef 5a       	subi	r30, 0xAF	; 175
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a0 e8       	ldi	r26, 0x80	; 128
    24d2:	bf e3       	ldi	r27, 0x3F	; 63
    24d4:	80 83       	st	Z, r24
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	a2 83       	std	Z+2, r26	; 0x02
    24da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	8e 01       	movw	r16, r28
    24de:	03 5b       	subi	r16, 0xB3	; 179
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	fe 01       	movw	r30, r28
    24e4:	ef 5a       	subi	r30, 0xAF	; 175
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	4a e7       	ldi	r20, 0x7A	; 122
    24f6:	55 e4       	ldi	r21, 0x45	; 69
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	80 83       	st	Z, r24
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	a2 83       	std	Z+2, r26	; 0x02
    2508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250a:	fe 01       	movw	r30, r28
    250c:	e3 5b       	subi	r30, 0xB3	; 179
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e8       	ldi	r20, 0x80	; 128
    251e:	5f e3       	ldi	r21, 0x3F	; 63
    2520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2524:	88 23       	and	r24, r24
    2526:	44 f4       	brge	.+16     	; 0x2538 <LCD_writeChar+0x20e>
		__ticks = 1;
    2528:	fe 01       	movw	r30, r28
    252a:	e5 5b       	subi	r30, 0xB5	; 181
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
    2536:	64 c0       	rjmp	.+200    	; 0x2600 <LCD_writeChar+0x2d6>
	else if (__tmp > 65535)
    2538:	fe 01       	movw	r30, r28
    253a:	e3 5b       	subi	r30, 0xB3	; 179
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	0c f0       	brlt	.+2      	; 0x2558 <LCD_writeChar+0x22e>
    2556:	43 c0       	rjmp	.+134    	; 0x25de <LCD_writeChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2558:	fe 01       	movw	r30, r28
    255a:	ef 5a       	subi	r30, 0xAF	; 175
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8e 01       	movw	r16, r28
    2578:	05 5b       	subi	r16, 0xB5	; 181
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	f8 01       	movw	r30, r16
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	1f c0       	rjmp	.+62     	; 0x25ce <LCD_writeChar+0x2a4>
    2590:	fe 01       	movw	r30, r28
    2592:	e7 5b       	subi	r30, 0xB7	; 183
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 e9       	ldi	r24, 0x90	; 144
    2598:	91 e0       	ldi	r25, 0x01	; 1
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
    259e:	fe 01       	movw	r30, r28
    25a0:	e7 5b       	subi	r30, 0xB7	; 183
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_writeChar+0x27e>
    25ac:	fe 01       	movw	r30, r28
    25ae:	e7 5b       	subi	r30, 0xB7	; 183
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	de 01       	movw	r26, r28
    25b8:	a5 5b       	subi	r26, 0xB5	; 181
    25ba:	bf 4f       	sbci	r27, 0xFF	; 255
    25bc:	fe 01       	movw	r30, r28
    25be:	e5 5b       	subi	r30, 0xB5	; 181
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	11 96       	adiw	r26, 0x01	; 1
    25ca:	9c 93       	st	X, r25
    25cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	fe 01       	movw	r30, r28
    25d0:	e5 5b       	subi	r30, 0xB5	; 181
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	91 81       	ldd	r25, Z+1	; 0x01
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	d1 f6       	brne	.-76     	; 0x2590 <LCD_writeChar+0x266>
    25dc:	27 c0       	rjmp	.+78     	; 0x262c <LCD_writeChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25de:	8e 01       	movw	r16, r28
    25e0:	05 5b       	subi	r16, 0xB5	; 181
    25e2:	1f 4f       	sbci	r17, 0xFF	; 255
    25e4:	fe 01       	movw	r30, r28
    25e6:	e3 5b       	subi	r30, 0xB3	; 179
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	82 81       	ldd	r24, Z+2	; 0x02
    25f0:	93 81       	ldd	r25, Z+3	; 0x03
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	f8 01       	movw	r30, r16
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
    2600:	de 01       	movw	r26, r28
    2602:	a9 5b       	subi	r26, 0xB9	; 185
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	fe 01       	movw	r30, r28
    2608:	e5 5b       	subi	r30, 0xB5	; 181
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	8d 93       	st	X+, r24
    2612:	9c 93       	st	X, r25
    2614:	fe 01       	movw	r30, r28
    2616:	e9 5b       	subi	r30, 0xB9	; 185
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_writeChar+0x2f4>
    2622:	fe 01       	movw	r30, r28
    2624:	e9 5b       	subi	r30, 0xB9	; 185
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24

			_delay_ms(1);

		#else

			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(ch,4) );
    262c:	fe 01       	movw	r30, r28
    262e:	ed 59       	subi	r30, 0x9D	; 157
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	80 71       	andi	r24, 0x10	; 16
    263a:	90 70       	andi	r25, 0x00	; 0
    263c:	95 95       	asr	r25
    263e:	87 95       	ror	r24
    2640:	95 95       	asr	r25
    2642:	87 95       	ror	r24
    2644:	95 95       	asr	r25
    2646:	87 95       	ror	r24
    2648:	95 95       	asr	r25
    264a:	87 95       	ror	r24
    264c:	98 2f       	mov	r25, r24
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	49 2f       	mov	r20, r25
    2654:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(ch,5) );
    2658:	fe 01       	movw	r30, r28
    265a:	ed 59       	subi	r30, 0x9D	; 157
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 81       	ld	r24, Z
    2660:	88 2f       	mov	r24, r24
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	80 72       	andi	r24, 0x20	; 32
    2666:	90 70       	andi	r25, 0x00	; 0
    2668:	95 95       	asr	r25
    266a:	87 95       	ror	r24
    266c:	95 95       	asr	r25
    266e:	87 95       	ror	r24
    2670:	95 95       	asr	r25
    2672:	87 95       	ror	r24
    2674:	95 95       	asr	r25
    2676:	87 95       	ror	r24
    2678:	95 95       	asr	r25
    267a:	87 95       	ror	r24
    267c:	98 2f       	mov	r25, r24
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	61 e0       	ldi	r22, 0x01	; 1
    2682:	49 2f       	mov	r20, r25
    2684:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(ch,6) );
    2688:	fe 01       	movw	r30, r28
    268a:	ed 59       	subi	r30, 0x9D	; 157
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	80 74       	andi	r24, 0x40	; 64
    2696:	90 70       	andi	r25, 0x00	; 0
    2698:	08 2e       	mov	r0, r24
    269a:	89 2f       	mov	r24, r25
    269c:	00 0c       	add	r0, r0
    269e:	88 1f       	adc	r24, r24
    26a0:	99 0b       	sbc	r25, r25
    26a2:	00 0c       	add	r0, r0
    26a4:	88 1f       	adc	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	98 2f       	mov	r25, r24
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	62 e0       	ldi	r22, 0x02	; 2
    26ae:	49 2f       	mov	r20, r25
    26b0:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(ch,7) );
    26b4:	fe 01       	movw	r30, r28
    26b6:	ed 59       	subi	r30, 0x9D	; 157
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	98 2f       	mov	r25, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	99 27       	eor	r25, r25
    26c2:	99 1f       	adc	r25, r25
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	64 e0       	ldi	r22, 0x04	; 4
    26c8:	49 2f       	mov	r20, r25
    26ca:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    26ce:	fe 01       	movw	r30, r28
    26d0:	ed 5b       	subi	r30, 0xBD	; 189
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 e8       	ldi	r26, 0x80	; 128
    26da:	bf e3       	ldi	r27, 0x3F	; 63
    26dc:	80 83       	st	Z, r24
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	a2 83       	std	Z+2, r26	; 0x02
    26e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	8e 01       	movw	r16, r28
    26e6:	01 5c       	subi	r16, 0xC1	; 193
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	ed 5b       	subi	r30, 0xBD	; 189
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	82 81       	ldd	r24, Z+2	; 0x02
    26f6:	93 81       	ldd	r25, Z+3	; 0x03
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	4a e7       	ldi	r20, 0x7A	; 122
    26fe:	55 e4       	ldi	r21, 0x45	; 69
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	f8 01       	movw	r30, r16
    270a:	80 83       	st	Z, r24
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	a2 83       	std	Z+2, r26	; 0x02
    2710:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2712:	fe 01       	movw	r30, r28
    2714:	ff 96       	adiw	r30, 0x3f	; 63
    2716:	60 81       	ld	r22, Z
    2718:	71 81       	ldd	r23, Z+1	; 0x01
    271a:	82 81       	ldd	r24, Z+2	; 0x02
    271c:	93 81       	ldd	r25, Z+3	; 0x03
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e8       	ldi	r20, 0x80	; 128
    2724:	5f e3       	ldi	r21, 0x3F	; 63
    2726:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    272a:	88 23       	and	r24, r24
    272c:	2c f4       	brge	.+10     	; 0x2738 <LCD_writeChar+0x40e>
		__ticks = 1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	9e af       	std	Y+62, r25	; 0x3e
    2734:	8d af       	std	Y+61, r24	; 0x3d
    2736:	46 c0       	rjmp	.+140    	; 0x27c4 <LCD_writeChar+0x49a>
	else if (__tmp > 65535)
    2738:	fe 01       	movw	r30, r28
    273a:	ff 96       	adiw	r30, 0x3f	; 63
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2750:	18 16       	cp	r1, r24
    2752:	64 f5       	brge	.+88     	; 0x27ac <LCD_writeChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	fe 01       	movw	r30, r28
    2756:	ed 5b       	subi	r30, 0xBD	; 189
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e af       	std	Y+62, r25	; 0x3e
    2780:	8d af       	std	Y+61, r24	; 0x3d
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <LCD_writeChar+0x478>
    2784:	80 e9       	ldi	r24, 0x90	; 144
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	9c af       	std	Y+60, r25	; 0x3c
    278a:	8b af       	std	Y+59, r24	; 0x3b
    278c:	8b ad       	ldd	r24, Y+59	; 0x3b
    278e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_writeChar+0x466>
    2794:	9c af       	std	Y+60, r25	; 0x3c
    2796:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	8d ad       	ldd	r24, Y+61	; 0x3d
    279a:	9e ad       	ldd	r25, Y+62	; 0x3e
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	9e af       	std	Y+62, r25	; 0x3e
    27a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    27a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	69 f7       	brne	.-38     	; 0x2784 <LCD_writeChar+0x45a>
    27aa:	16 c0       	rjmp	.+44     	; 0x27d8 <LCD_writeChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	fe 01       	movw	r30, r28
    27ae:	ff 96       	adiw	r30, 0x3f	; 63
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9e af       	std	Y+62, r25	; 0x3e
    27c2:	8d af       	std	Y+61, r24	; 0x3d
    27c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    27c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    27c8:	9a af       	std	Y+58, r25	; 0x3a
    27ca:	89 af       	std	Y+57, r24	; 0x39
    27cc:	89 ad       	ldd	r24, Y+57	; 0x39
    27ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <LCD_writeChar+0x4a6>
    27d4:	9a af       	std	Y+58, r25	; 0x3a
    27d6:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(1);
			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /*write 0 in enable pin to make falling edge*/
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	62 e0       	ldi	r22, 0x02	; 2
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a0 e8       	ldi	r26, 0x80	; 128
    27e8:	bf e3       	ldi	r27, 0x3F	; 63
    27ea:	8d ab       	std	Y+53, r24	; 0x35
    27ec:	9e ab       	std	Y+54, r25	; 0x36
    27ee:	af ab       	std	Y+55, r26	; 0x37
    27f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f2:	6d a9       	ldd	r22, Y+53	; 0x35
    27f4:	7e a9       	ldd	r23, Y+54	; 0x36
    27f6:	8f a9       	ldd	r24, Y+55	; 0x37
    27f8:	98 ad       	ldd	r25, Y+56	; 0x38
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a e7       	ldi	r20, 0x7A	; 122
    2800:	55 e4       	ldi	r21, 0x45	; 69
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	89 ab       	std	Y+49, r24	; 0x31
    280c:	9a ab       	std	Y+50, r25	; 0x32
    280e:	ab ab       	std	Y+51, r26	; 0x33
    2810:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2812:	69 a9       	ldd	r22, Y+49	; 0x31
    2814:	7a a9       	ldd	r23, Y+50	; 0x32
    2816:	8b a9       	ldd	r24, Y+51	; 0x33
    2818:	9c a9       	ldd	r25, Y+52	; 0x34
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2826:	88 23       	and	r24, r24
    2828:	2c f4       	brge	.+10     	; 0x2834 <LCD_writeChar+0x50a>
		__ticks = 1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	98 ab       	std	Y+48, r25	; 0x30
    2830:	8f a7       	std	Y+47, r24	; 0x2f
    2832:	3f c0       	rjmp	.+126    	; 0x28b2 <LCD_writeChar+0x588>
	else if (__tmp > 65535)
    2834:	69 a9       	ldd	r22, Y+49	; 0x31
    2836:	7a a9       	ldd	r23, Y+50	; 0x32
    2838:	8b a9       	ldd	r24, Y+51	; 0x33
    283a:	9c a9       	ldd	r25, Y+52	; 0x34
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	4c f5       	brge	.+82     	; 0x289e <LCD_writeChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284c:	6d a9       	ldd	r22, Y+53	; 0x35
    284e:	7e a9       	ldd	r23, Y+54	; 0x36
    2850:	8f a9       	ldd	r24, Y+55	; 0x37
    2852:	98 ad       	ldd	r25, Y+56	; 0x38
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	98 ab       	std	Y+48, r25	; 0x30
    2872:	8f a7       	std	Y+47, r24	; 0x2f
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <LCD_writeChar+0x56a>
    2876:	80 e9       	ldi	r24, 0x90	; 144
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	9e a7       	std	Y+46, r25	; 0x2e
    287c:	8d a7       	std	Y+45, r24	; 0x2d
    287e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2880:	9e a5       	ldd	r25, Y+46	; 0x2e
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_writeChar+0x558>
    2886:	9e a7       	std	Y+46, r25	; 0x2e
    2888:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	8f a5       	ldd	r24, Y+47	; 0x2f
    288c:	98 a9       	ldd	r25, Y+48	; 0x30
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2894:	8f a5       	ldd	r24, Y+47	; 0x2f
    2896:	98 a9       	ldd	r25, Y+48	; 0x30
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	69 f7       	brne	.-38     	; 0x2876 <LCD_writeChar+0x54c>
    289c:	14 c0       	rjmp	.+40     	; 0x28c6 <LCD_writeChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289e:	69 a9       	ldd	r22, Y+49	; 0x31
    28a0:	7a a9       	ldd	r23, Y+50	; 0x32
    28a2:	8b a9       	ldd	r24, Y+51	; 0x33
    28a4:	9c a9       	ldd	r25, Y+52	; 0x34
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	98 ab       	std	Y+48, r25	; 0x30
    28b0:	8f a7       	std	Y+47, r24	; 0x2f
    28b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b4:	98 a9       	ldd	r25, Y+48	; 0x30
    28b6:	9c a7       	std	Y+44, r25	; 0x2c
    28b8:	8b a7       	std	Y+43, r24	; 0x2b
    28ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    28bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_writeChar+0x594>
    28c2:	9c a7       	std	Y+44, r25	; 0x2c
    28c4:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /*write 1 in enable pin */
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	62 e0       	ldi	r22, 0x02	; 2
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a0 e8       	ldi	r26, 0x80	; 128
    28d6:	bf e3       	ldi	r27, 0x3F	; 63
    28d8:	8f a3       	std	Y+39, r24	; 0x27
    28da:	98 a7       	std	Y+40, r25	; 0x28
    28dc:	a9 a7       	std	Y+41, r26	; 0x29
    28de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e0:	6f a1       	ldd	r22, Y+39	; 0x27
    28e2:	78 a5       	ldd	r23, Y+40	; 0x28
    28e4:	89 a5       	ldd	r24, Y+41	; 0x29
    28e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	4a e7       	ldi	r20, 0x7A	; 122
    28ee:	55 e4       	ldi	r21, 0x45	; 69
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	8b a3       	std	Y+35, r24	; 0x23
    28fa:	9c a3       	std	Y+36, r25	; 0x24
    28fc:	ad a3       	std	Y+37, r26	; 0x25
    28fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2900:	6b a1       	ldd	r22, Y+35	; 0x23
    2902:	7c a1       	ldd	r23, Y+36	; 0x24
    2904:	8d a1       	ldd	r24, Y+37	; 0x25
    2906:	9e a1       	ldd	r25, Y+38	; 0x26
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	2c f4       	brge	.+10     	; 0x2922 <LCD_writeChar+0x5f8>
		__ticks = 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9a a3       	std	Y+34, r25	; 0x22
    291e:	89 a3       	std	Y+33, r24	; 0x21
    2920:	3f c0       	rjmp	.+126    	; 0x29a0 <LCD_writeChar+0x676>
	else if (__tmp > 65535)
    2922:	6b a1       	ldd	r22, Y+35	; 0x23
    2924:	7c a1       	ldd	r23, Y+36	; 0x24
    2926:	8d a1       	ldd	r24, Y+37	; 0x25
    2928:	9e a1       	ldd	r25, Y+38	; 0x26
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	3f ef       	ldi	r19, 0xFF	; 255
    292e:	4f e7       	ldi	r20, 0x7F	; 127
    2930:	57 e4       	ldi	r21, 0x47	; 71
    2932:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2936:	18 16       	cp	r1, r24
    2938:	4c f5       	brge	.+82     	; 0x298c <LCD_writeChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293a:	6f a1       	ldd	r22, Y+39	; 0x27
    293c:	78 a5       	ldd	r23, Y+40	; 0x28
    293e:	89 a5       	ldd	r24, Y+41	; 0x29
    2940:	9a a5       	ldd	r25, Y+42	; 0x2a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e2       	ldi	r20, 0x20	; 32
    2948:	51 e4       	ldi	r21, 0x41	; 65
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	9a a3       	std	Y+34, r25	; 0x22
    2960:	89 a3       	std	Y+33, r24	; 0x21
    2962:	0f c0       	rjmp	.+30     	; 0x2982 <LCD_writeChar+0x658>
    2964:	80 e9       	ldi	r24, 0x90	; 144
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	98 a3       	std	Y+32, r25	; 0x20
    296a:	8f 8f       	std	Y+31, r24	; 0x1f
    296c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    296e:	98 a1       	ldd	r25, Y+32	; 0x20
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <LCD_writeChar+0x646>
    2974:	98 a3       	std	Y+32, r25	; 0x20
    2976:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2978:	89 a1       	ldd	r24, Y+33	; 0x21
    297a:	9a a1       	ldd	r25, Y+34	; 0x22
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	9a a3       	std	Y+34, r25	; 0x22
    2980:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2982:	89 a1       	ldd	r24, Y+33	; 0x21
    2984:	9a a1       	ldd	r25, Y+34	; 0x22
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	69 f7       	brne	.-38     	; 0x2964 <LCD_writeChar+0x63a>
    298a:	14 c0       	rjmp	.+40     	; 0x29b4 <LCD_writeChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298c:	6b a1       	ldd	r22, Y+35	; 0x23
    298e:	7c a1       	ldd	r23, Y+36	; 0x24
    2990:	8d a1       	ldd	r24, Y+37	; 0x25
    2992:	9e a1       	ldd	r25, Y+38	; 0x26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9a a3       	std	Y+34, r25	; 0x22
    299e:	89 a3       	std	Y+33, r24	; 0x21
    29a0:	89 a1       	ldd	r24, Y+33	; 0x21
    29a2:	9a a1       	ldd	r25, Y+34	; 0x22
    29a4:	9e 8f       	std	Y+30, r25	; 0x1e
    29a6:	8d 8f       	std	Y+29, r24	; 0x1d
    29a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <LCD_writeChar+0x682>
    29b0:	9e 8f       	std	Y+30, r25	; 0x1e
    29b2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);

			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(ch,0) );
    29b4:	fe 01       	movw	r30, r28
    29b6:	ed 59       	subi	r30, 0x9D	; 157
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	98 2f       	mov	r25, r24
    29be:	91 70       	andi	r25, 0x01	; 1
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	60 e0       	ldi	r22, 0x00	; 0
    29c4:	49 2f       	mov	r20, r25
    29c6:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(ch,1) );
    29ca:	fe 01       	movw	r30, r28
    29cc:	ed 59       	subi	r30, 0x9D	; 157
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	88 2f       	mov	r24, r24
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	82 70       	andi	r24, 0x02	; 2
    29d8:	90 70       	andi	r25, 0x00	; 0
    29da:	95 95       	asr	r25
    29dc:	87 95       	ror	r24
    29de:	98 2f       	mov	r25, r24
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	61 e0       	ldi	r22, 0x01	; 1
    29e4:	49 2f       	mov	r20, r25
    29e6:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(ch,2) );
    29ea:	fe 01       	movw	r30, r28
    29ec:	ed 59       	subi	r30, 0x9D	; 157
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	80 81       	ld	r24, Z
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	84 70       	andi	r24, 0x04	; 4
    29f8:	90 70       	andi	r25, 0x00	; 0
    29fa:	95 95       	asr	r25
    29fc:	87 95       	ror	r24
    29fe:	95 95       	asr	r25
    2a00:	87 95       	ror	r24
    2a02:	98 2f       	mov	r25, r24
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	62 e0       	ldi	r22, 0x02	; 2
    2a08:	49 2f       	mov	r20, r25
    2a0a:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(ch,3) );
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ed 59       	subi	r30, 0x9D	; 157
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	80 81       	ld	r24, Z
    2a16:	88 2f       	mov	r24, r24
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	88 70       	andi	r24, 0x08	; 8
    2a1c:	90 70       	andi	r25, 0x00	; 0
    2a1e:	95 95       	asr	r25
    2a20:	87 95       	ror	r24
    2a22:	95 95       	asr	r25
    2a24:	87 95       	ror	r24
    2a26:	95 95       	asr	r25
    2a28:	87 95       	ror	r24
    2a2a:	98 2f       	mov	r25, r24
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	64 e0       	ldi	r22, 0x04	; 4
    2a30:	49 2f       	mov	r20, r25
    2a32:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 e8       	ldi	r26, 0x80	; 128
    2a3c:	bf e3       	ldi	r27, 0x3F	; 63
    2a3e:	89 8f       	std	Y+25, r24	; 0x19
    2a40:	9a 8f       	std	Y+26, r25	; 0x1a
    2a42:	ab 8f       	std	Y+27, r26	; 0x1b
    2a44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	69 8d       	ldd	r22, Y+25	; 0x19
    2a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a e7       	ldi	r20, 0x7A	; 122
    2a54:	55 e4       	ldi	r21, 0x45	; 69
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	8d 8b       	std	Y+21, r24	; 0x15
    2a60:	9e 8b       	std	Y+22, r25	; 0x16
    2a62:	af 8b       	std	Y+23, r26	; 0x17
    2a64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a66:	6d 89       	ldd	r22, Y+21	; 0x15
    2a68:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <LCD_writeChar+0x75e>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9c 8b       	std	Y+20, r25	; 0x14
    2a84:	8b 8b       	std	Y+19, r24	; 0x13
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <LCD_writeChar+0x7dc>
	else if (__tmp > 65535)
    2a88:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <LCD_writeChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9c 8b       	std	Y+20, r25	; 0x14
    2ac6:	8b 8b       	std	Y+19, r24	; 0x13
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <LCD_writeChar+0x7be>
    2aca:	80 e9       	ldi	r24, 0x90	; 144
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	9a 8b       	std	Y+18, r25	; 0x12
    2ad0:	89 8b       	std	Y+17, r24	; 0x11
    2ad2:	89 89       	ldd	r24, Y+17	; 0x11
    2ad4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <LCD_writeChar+0x7ac>
    2ada:	9a 8b       	std	Y+18, r25	; 0x12
    2adc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9c 8b       	std	Y+20, r25	; 0x14
    2ae6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aea:	9c 89       	ldd	r25, Y+20	; 0x14
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <LCD_writeChar+0x7a0>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <LCD_writeChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6d 89       	ldd	r22, Y+21	; 0x15
    2af4:	7e 89       	ldd	r23, Y+22	; 0x16
    2af6:	8f 89       	ldd	r24, Y+23	; 0x17
    2af8:	98 8d       	ldd	r25, Y+24	; 0x18
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9c 8b       	std	Y+20, r25	; 0x14
    2b04:	8b 8b       	std	Y+19, r24	; 0x13
    2b06:	8b 89       	ldd	r24, Y+19	; 0x13
    2b08:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0a:	98 8b       	std	Y+16, r25	; 0x10
    2b0c:	8f 87       	std	Y+15, r24	; 0x0f
    2b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b10:	98 89       	ldd	r25, Y+16	; 0x10
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <LCD_writeChar+0x7e8>
    2b16:	98 8b       	std	Y+16, r25	; 0x10
    2b18:	8f 87       	std	Y+15, r24	; 0x0f



		#endif

			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	62 e0       	ldi	r22, 0x02	; 2
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	a0 e8       	ldi	r26, 0x80	; 128
    2b2a:	bf e3       	ldi	r27, 0x3F	; 63
    2b2c:	8b 87       	std	Y+11, r24	; 0x0b
    2b2e:	9c 87       	std	Y+12, r25	; 0x0c
    2b30:	ad 87       	std	Y+13, r26	; 0x0d
    2b32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a e7       	ldi	r20, 0x7A	; 122
    2b42:	55 e4       	ldi	r21, 0x45	; 69
    2b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	8f 83       	std	Y+7, r24	; 0x07
    2b4e:	98 87       	std	Y+8, r25	; 0x08
    2b50:	a9 87       	std	Y+9, r26	; 0x09
    2b52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e8       	ldi	r20, 0x80	; 128
    2b62:	5f e3       	ldi	r21, 0x3F	; 63
    2b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b68:	88 23       	and	r24, r24
    2b6a:	2c f4       	brge	.+10     	; 0x2b76 <LCD_writeChar+0x84c>
		__ticks = 1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	8d 83       	std	Y+5, r24	; 0x05
    2b74:	3f c0       	rjmp	.+126    	; 0x2bf4 <LCD_writeChar+0x8ca>
	else if (__tmp > 65535)
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	57 e4       	ldi	r21, 0x47	; 71
    2b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b8a:	18 16       	cp	r1, r24
    2b8c:	4c f5       	brge	.+82     	; 0x2be0 <LCD_writeChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e2       	ldi	r20, 0x20	; 32
    2b9c:	51 e4       	ldi	r21, 0x41	; 65
    2b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9e 83       	std	Y+6, r25	; 0x06
    2bb4:	8d 83       	std	Y+5, r24	; 0x05
    2bb6:	0f c0       	rjmp	.+30     	; 0x2bd6 <LCD_writeChar+0x8ac>
    2bb8:	80 e9       	ldi	r24, 0x90	; 144
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	9c 83       	std	Y+4, r25	; 0x04
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <LCD_writeChar+0x89a>
    2bc8:	9c 83       	std	Y+4, r25	; 0x04
    2bca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bce:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	69 f7       	brne	.-38     	; 0x2bb8 <LCD_writeChar+0x88e>
    2bde:	14 c0       	rjmp	.+40     	; 0x2c08 <LCD_writeChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be0:	6f 81       	ldd	r22, Y+7	; 0x07
    2be2:	78 85       	ldd	r23, Y+8	; 0x08
    2be4:	89 85       	ldd	r24, Y+9	; 0x09
    2be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	9e 83       	std	Y+6, r25	; 0x06
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <LCD_writeChar+0x8d6>
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
			/*write  0 in enable pin beacase LCD read the at falling edge of enable, so we make it 1 then 0*/

			_delay_ms(1);
}
    2c08:	cd 59       	subi	r28, 0x9D	; 157
    2c0a:	df 4f       	sbci	r29, 0xFF	; 255
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	08 95       	ret

00002c20 <LCD_writeString>:

void LCD_writeString(uint8 *str)
{
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	00 d0       	rcall	.+0      	; 0x2c26 <LCD_writeString+0x6>
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <LCD_writeString+0x8>
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	9c 83       	std	Y+4, r25	; 0x04
    2c2e:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    2c30:	1a 82       	std	Y+2, r1	; 0x02
    2c32:	19 82       	std	Y+1, r1	; 0x01
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <LCD_writeString+0x34>
	while(str[i]!='\0')
	{
		LCD_writeChar(str[i]);
    2c36:	29 81       	ldd	r18, Y+1	; 0x01
    2c38:	3a 81       	ldd	r19, Y+2	; 0x02
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3e:	fc 01       	movw	r30, r24
    2c40:	e2 0f       	add	r30, r18
    2c42:	f3 1f       	adc	r31, r19
    2c44:	80 81       	ld	r24, Z
    2c46:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_writeChar>
		i++;
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4e:	01 96       	adiw	r24, 0x01	; 1
    2c50:	9a 83       	std	Y+2, r25	; 0x02
    2c52:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_writeString(uint8 *str)
{
	int i=0;
	while(str[i]!='\0')
    2c54:	29 81       	ldd	r18, Y+1	; 0x01
    2c56:	3a 81       	ldd	r19, Y+2	; 0x02
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	e2 0f       	add	r30, r18
    2c60:	f3 1f       	adc	r31, r19
    2c62:	80 81       	ld	r24, Z
    2c64:	88 23       	and	r24, r24
    2c66:	39 f7       	brne	.-50     	; 0x2c36 <LCD_writeString+0x16>
	{
		LCD_writeChar(str[i]);
		i++;
	}
}
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row , uint8 col)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <LCD_moveCursor+0x6>
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <LCD_moveCursor+0x8>
    2c7e:	0f 92       	push	r0
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	8a 83       	std	Y+2, r24	; 0x02
    2c86:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address=0x00;
    2c88:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	3d 83       	std	Y+5, r19	; 0x05
    2c92:	2c 83       	std	Y+4, r18	; 0x04
    2c94:	8c 81       	ldd	r24, Y+4	; 0x04
    2c96:	9d 81       	ldd	r25, Y+5	; 0x05
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	c1 f0       	breq	.+48     	; 0x2cce <LCD_moveCursor+0x58>
    2c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ca2:	22 30       	cpi	r18, 0x02	; 2
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	2c f4       	brge	.+10     	; 0x2cb2 <LCD_moveCursor+0x3c>
    2ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    2caa:	9d 81       	ldd	r25, Y+5	; 0x05
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	61 f0       	breq	.+24     	; 0x2cc8 <LCD_moveCursor+0x52>
    2cb0:	19 c0       	rjmp	.+50     	; 0x2ce4 <LCD_moveCursor+0x6e>
    2cb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2cb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2cb6:	22 30       	cpi	r18, 0x02	; 2
    2cb8:	31 05       	cpc	r19, r1
    2cba:	69 f0       	breq	.+26     	; 0x2cd6 <LCD_moveCursor+0x60>
    2cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc0:	83 30       	cpi	r24, 0x03	; 3
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	61 f0       	breq	.+24     	; 0x2cde <LCD_moveCursor+0x68>
    2cc6:	0e c0       	rjmp	.+28     	; 0x2ce4 <LCD_moveCursor+0x6e>
	{
	case 0:
		lcd_memory_address=col+0x00;
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	0b c0       	rjmp	.+22     	; 0x2ce4 <LCD_moveCursor+0x6e>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	80 5c       	subi	r24, 0xC0	; 192
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	07 c0       	rjmp	.+14     	; 0x2ce4 <LCD_moveCursor+0x6e>
		break;
	case 2: /*for 4 line LCD*/
		lcd_memory_address=col+0x10;
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	80 5f       	subi	r24, 0xF0	; 240
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	03 c0       	rjmp	.+6      	; 0x2ce4 <LCD_moveCursor+0x6e>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	80 5b       	subi	r24, 0xB0	; 176
    2ce2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	LCD_sendCommand(lcd_memory_address | 0x80);
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	80 68       	ori	r24, 0x80	; 128
    2ce8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_sendCommand>
}
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <LCD_integerToString>:

void LCD_integerToString(uint8 num)
{
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	61 97       	sbiw	r28, 0x11	; 17
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	89 8b       	std	Y+17, r24	; 0x11
	char numInAsci[16];
	itoa(num,numInAsci,10);
    2d12:	89 89       	ldd	r24, Y+17	; 0x11
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	9e 01       	movw	r18, r28
    2d1a:	2f 5f       	subi	r18, 0xFF	; 255
    2d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1e:	b9 01       	movw	r22, r18
    2d20:	4a e0       	ldi	r20, 0x0A	; 10
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	0e 94 bf 20 	call	0x417e	; 0x417e <itoa>
	LCD_writeString(numInAsci);
    2d28:	ce 01       	movw	r24, r28
    2d2a:	01 96       	adiw	r24, 0x01	; 1
    2d2c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <LCD_writeString>
}
    2d30:	61 96       	adiw	r28, 0x11	; 17
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <LCD_clearScreen>:

void LCD_clearScreen()
{
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_sendCommand>
}
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <main>:
#define  GAS_IS_DETECTED   53
#define  COUNTER_ID        54


int main()
{
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	c4 5a       	subi	r28, 0xA4	; 164
    2d64:	d0 40       	sbci	r29, 0x00	; 0
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61

	SREG = SREG | (1<<7);       /*open the global intrrupt */
    2d70:	af e5       	ldi	r26, 0x5F	; 95
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ef e5       	ldi	r30, 0x5F	; 95
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	80 68       	ori	r24, 0x80	; 128
    2d7c:	8c 93       	st	X, r24


	GPIO_setupPinDirection( PORTA_ID , PIN5_ID,  OUTPUT );
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	65 e0       	ldi	r22, 0x05	; 5
    2d82:	41 e0       	ldi	r20, 0x01	; 1
    2d84:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_setupPinDirection( PORTA_ID , PIN6_ID,  OUTPUT );
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	66 e0       	ldi	r22, 0x06	; 6
    2d8c:	41 e0       	ldi	r20, 0x01	; 1
    2d8e:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>

	GPIO_setupPinDirection( PORTA_ID , PIN4_ID,  INPUT );
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	64 e0       	ldi	r22, 0x04	; 4
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>

	GPIO_setupPinDirection( PORTD_ID , PIN2_ID,  INPUT );
    2d9c:	83 e0       	ldi	r24, 0x03	; 3
    2d9e:	62 e0       	ldi	r22, 0x02	; 2
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_setupPinDirection( PORTD_ID , PIN3_ID,  INPUT );
    2da6:	83 e0       	ldi	r24, 0x03	; 3
    2da8:	63 e0       	ldi	r22, 0x03	; 3
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>


	MCUCR |= (1<<0) | (1<<1) | (1<<2) | (1<<3);
    2db0:	a5 e5       	ldi	r26, 0x55	; 85
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	e5 e5       	ldi	r30, 0x55	; 85
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	8f 60       	ori	r24, 0x0F	; 15
    2dbc:	8c 93       	st	X, r24
	GICR  |= (1<<6) | (1<<7);
    2dbe:	ab e5       	ldi	r26, 0x5B	; 91
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	eb e5       	ldi	r30, 0x5B	; 91
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 6c       	ori	r24, 0xC0	; 192
    2dca:	8c 93       	st	X, r24

	/* Enable the 7 segment */
	GPIO_setupPinDirection( PORTB_ID , PIN6_ID , OUTPUT );
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	66 e0       	ldi	r22, 0x06	; 6
    2dd0:	41 e0       	ldi	r20, 0x01	; 1
    2dd2:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_writePin( PORTB_ID , PIN6_ID , 0 );
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	66 e0       	ldi	r22, 0x06	; 6
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>

	ADC_config congif = { AVCC_PIN_5V , DIVITION_FACTOR_128 , FREE_RUNNIING_MODE };
    2de0:	ce 01       	movw	r24, r28
    2de2:	8f 56       	subi	r24, 0x6F	; 111
    2de4:	9f 4f       	sbci	r25, 0xFF	; 255
    2de6:	c5 56       	subi	r28, 0x65	; 101
    2de8:	df 4f       	sbci	r29, 0xFF	; 255
    2dea:	99 83       	std	Y+1, r25	; 0x01
    2dec:	88 83       	st	Y, r24
    2dee:	cb 59       	subi	r28, 0x9B	; 155
    2df0:	d0 40       	sbci	r29, 0x00	; 0
    2df2:	8f e6       	ldi	r24, 0x6F	; 111
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	c3 56       	subi	r28, 0x63	; 99
    2df8:	df 4f       	sbci	r29, 0xFF	; 255
    2dfa:	99 83       	std	Y+1, r25	; 0x01
    2dfc:	88 83       	st	Y, r24
    2dfe:	cd 59       	subi	r28, 0x9D	; 157
    2e00:	d0 40       	sbci	r29, 0x00	; 0
    2e02:	93 e0       	ldi	r25, 0x03	; 3
    2e04:	c1 56       	subi	r28, 0x61	; 97
    2e06:	df 4f       	sbci	r29, 0xFF	; 255
    2e08:	98 83       	st	Y, r25
    2e0a:	cf 59       	subi	r28, 0x9F	; 159
    2e0c:	d0 40       	sbci	r29, 0x00	; 0
    2e0e:	c3 56       	subi	r28, 0x63	; 99
    2e10:	df 4f       	sbci	r29, 0xFF	; 255
    2e12:	e8 81       	ld	r30, Y
    2e14:	f9 81       	ldd	r31, Y+1	; 0x01
    2e16:	cd 59       	subi	r28, 0x9D	; 157
    2e18:	d0 40       	sbci	r29, 0x00	; 0
    2e1a:	00 80       	ld	r0, Z
    2e1c:	c3 56       	subi	r28, 0x63	; 99
    2e1e:	df 4f       	sbci	r29, 0xFF	; 255
    2e20:	88 81       	ld	r24, Y
    2e22:	99 81       	ldd	r25, Y+1	; 0x01
    2e24:	cd 59       	subi	r28, 0x9D	; 157
    2e26:	d0 40       	sbci	r29, 0x00	; 0
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	c3 56       	subi	r28, 0x63	; 99
    2e2c:	df 4f       	sbci	r29, 0xFF	; 255
    2e2e:	99 83       	std	Y+1, r25	; 0x01
    2e30:	88 83       	st	Y, r24
    2e32:	cd 59       	subi	r28, 0x9D	; 157
    2e34:	d0 40       	sbci	r29, 0x00	; 0
    2e36:	c5 56       	subi	r28, 0x65	; 101
    2e38:	df 4f       	sbci	r29, 0xFF	; 255
    2e3a:	e8 81       	ld	r30, Y
    2e3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e3e:	cb 59       	subi	r28, 0x9B	; 155
    2e40:	d0 40       	sbci	r29, 0x00	; 0
    2e42:	00 82       	st	Z, r0
    2e44:	c5 56       	subi	r28, 0x65	; 101
    2e46:	df 4f       	sbci	r29, 0xFF	; 255
    2e48:	88 81       	ld	r24, Y
    2e4a:	99 81       	ldd	r25, Y+1	; 0x01
    2e4c:	cb 59       	subi	r28, 0x9B	; 155
    2e4e:	d0 40       	sbci	r29, 0x00	; 0
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	c5 56       	subi	r28, 0x65	; 101
    2e54:	df 4f       	sbci	r29, 0xFF	; 255
    2e56:	99 83       	std	Y+1, r25	; 0x01
    2e58:	88 83       	st	Y, r24
    2e5a:	cb 59       	subi	r28, 0x9B	; 155
    2e5c:	d0 40       	sbci	r29, 0x00	; 0
    2e5e:	c1 56       	subi	r28, 0x61	; 97
    2e60:	df 4f       	sbci	r29, 0xFF	; 255
    2e62:	98 81       	ld	r25, Y
    2e64:	cf 59       	subi	r28, 0x9F	; 159
    2e66:	d0 40       	sbci	r29, 0x00	; 0
    2e68:	91 50       	subi	r25, 0x01	; 1
    2e6a:	c1 56       	subi	r28, 0x61	; 97
    2e6c:	df 4f       	sbci	r29, 0xFF	; 255
    2e6e:	98 83       	st	Y, r25
    2e70:	cf 59       	subi	r28, 0x9F	; 159
    2e72:	d0 40       	sbci	r29, 0x00	; 0
    2e74:	c1 56       	subi	r28, 0x61	; 97
    2e76:	df 4f       	sbci	r29, 0xFF	; 255
    2e78:	e8 81       	ld	r30, Y
    2e7a:	cf 59       	subi	r28, 0x9F	; 159
    2e7c:	d0 40       	sbci	r29, 0x00	; 0
    2e7e:	ee 23       	and	r30, r30
    2e80:	31 f6       	brne	.-116    	; 0x2e0e <main+0xb8>
	ADC_init( &congif );
    2e82:	ce 01       	movw	r24, r28
    2e84:	8f 56       	subi	r24, 0x6F	; 111
    2e86:	9f 4f       	sbci	r25, 0xFF	; 255
    2e88:	0e 94 18 07 	call	0xe30	; 0xe30 <ADC_init>
	//	ADC_open();


	//	LCD_init();

	UART_configType config = { DISABLE , ONE_BIT , BIT8 , 9600 } ;
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	8c 56       	subi	r24, 0x6C	; 108
    2e90:	9f 4f       	sbci	r25, 0xFF	; 255
    2e92:	c0 56       	subi	r28, 0x60	; 96
    2e94:	df 4f       	sbci	r29, 0xFF	; 255
    2e96:	99 83       	std	Y+1, r25	; 0x01
    2e98:	88 83       	st	Y, r24
    2e9a:	c0 5a       	subi	r28, 0xA0	; 160
    2e9c:	d0 40       	sbci	r29, 0x00	; 0
    2e9e:	88 e6       	ldi	r24, 0x68	; 104
    2ea0:	91 e0       	ldi	r25, 0x01	; 1
    2ea2:	ce 55       	subi	r28, 0x5E	; 94
    2ea4:	df 4f       	sbci	r29, 0xFF	; 255
    2ea6:	99 83       	std	Y+1, r25	; 0x01
    2ea8:	88 83       	st	Y, r24
    2eaa:	c2 5a       	subi	r28, 0xA2	; 162
    2eac:	d0 40       	sbci	r29, 0x00	; 0
    2eae:	97 e0       	ldi	r25, 0x07	; 7
    2eb0:	cc 55       	subi	r28, 0x5C	; 92
    2eb2:	df 4f       	sbci	r29, 0xFF	; 255
    2eb4:	98 83       	st	Y, r25
    2eb6:	c4 5a       	subi	r28, 0xA4	; 164
    2eb8:	d0 40       	sbci	r29, 0x00	; 0
    2eba:	ce 55       	subi	r28, 0x5E	; 94
    2ebc:	df 4f       	sbci	r29, 0xFF	; 255
    2ebe:	e8 81       	ld	r30, Y
    2ec0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ec2:	c2 5a       	subi	r28, 0xA2	; 162
    2ec4:	d0 40       	sbci	r29, 0x00	; 0
    2ec6:	00 80       	ld	r0, Z
    2ec8:	ce 55       	subi	r28, 0x5E	; 94
    2eca:	df 4f       	sbci	r29, 0xFF	; 255
    2ecc:	88 81       	ld	r24, Y
    2ece:	99 81       	ldd	r25, Y+1	; 0x01
    2ed0:	c2 5a       	subi	r28, 0xA2	; 162
    2ed2:	d0 40       	sbci	r29, 0x00	; 0
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	ce 55       	subi	r28, 0x5E	; 94
    2ed8:	df 4f       	sbci	r29, 0xFF	; 255
    2eda:	99 83       	std	Y+1, r25	; 0x01
    2edc:	88 83       	st	Y, r24
    2ede:	c2 5a       	subi	r28, 0xA2	; 162
    2ee0:	d0 40       	sbci	r29, 0x00	; 0
    2ee2:	c0 56       	subi	r28, 0x60	; 96
    2ee4:	df 4f       	sbci	r29, 0xFF	; 255
    2ee6:	e8 81       	ld	r30, Y
    2ee8:	f9 81       	ldd	r31, Y+1	; 0x01
    2eea:	c0 5a       	subi	r28, 0xA0	; 160
    2eec:	d0 40       	sbci	r29, 0x00	; 0
    2eee:	00 82       	st	Z, r0
    2ef0:	c0 56       	subi	r28, 0x60	; 96
    2ef2:	df 4f       	sbci	r29, 0xFF	; 255
    2ef4:	88 81       	ld	r24, Y
    2ef6:	99 81       	ldd	r25, Y+1	; 0x01
    2ef8:	c0 5a       	subi	r28, 0xA0	; 160
    2efa:	d0 40       	sbci	r29, 0x00	; 0
    2efc:	01 96       	adiw	r24, 0x01	; 1
    2efe:	c0 56       	subi	r28, 0x60	; 96
    2f00:	df 4f       	sbci	r29, 0xFF	; 255
    2f02:	99 83       	std	Y+1, r25	; 0x01
    2f04:	88 83       	st	Y, r24
    2f06:	c0 5a       	subi	r28, 0xA0	; 160
    2f08:	d0 40       	sbci	r29, 0x00	; 0
    2f0a:	cc 55       	subi	r28, 0x5C	; 92
    2f0c:	df 4f       	sbci	r29, 0xFF	; 255
    2f0e:	98 81       	ld	r25, Y
    2f10:	c4 5a       	subi	r28, 0xA4	; 164
    2f12:	d0 40       	sbci	r29, 0x00	; 0
    2f14:	91 50       	subi	r25, 0x01	; 1
    2f16:	cc 55       	subi	r28, 0x5C	; 92
    2f18:	df 4f       	sbci	r29, 0xFF	; 255
    2f1a:	98 83       	st	Y, r25
    2f1c:	c4 5a       	subi	r28, 0xA4	; 164
    2f1e:	d0 40       	sbci	r29, 0x00	; 0
    2f20:	cc 55       	subi	r28, 0x5C	; 92
    2f22:	df 4f       	sbci	r29, 0xFF	; 255
    2f24:	e8 81       	ld	r30, Y
    2f26:	c4 5a       	subi	r28, 0xA4	; 164
    2f28:	d0 40       	sbci	r29, 0x00	; 0
    2f2a:	ee 23       	and	r30, r30
    2f2c:	31 f6       	brne	.-116    	; 0x2eba <main+0x164>
	UART_init( &config);
    2f2e:	ce 01       	movw	r24, r28
    2f30:	8c 56       	subi	r24, 0x6C	; 108
    2f32:	9f 4f       	sbci	r25, 0xFF	; 255
    2f34:	0e 94 98 07 	call	0xf30	; 0xf30 <UART_init>

	uint8 temprature , light_intensty , CO2 , flame ;
	GPIO_setupPinDirection( PORTC_ID , PIN6_ID , OUTPUT );
    2f38:	82 e0       	ldi	r24, 0x02	; 2
    2f3a:	66 e0       	ldi	r22, 0x06	; 6
    2f3c:	41 e0       	ldi	r20, 0x01	; 1
    2f3e:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>

	while(1)
	{


		ADMUX = 0;
    2f42:	e7 e2       	ldi	r30, 0x27	; 39
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0);
    2f48:	a7 e2       	ldi	r26, 0x27	; 39
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e7 e2       	ldi	r30, 0x27	; 39
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	80 64       	ori	r24, 0x40	; 64
    2f54:	8c 93       	st	X, r24

		ADMUX=(ADMUX&0XE0) | (7&0X01);
    2f56:	a7 e2       	ldi	r26, 0x27	; 39
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	e7 e2       	ldi	r30, 0x27	; 39
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	80 7e       	andi	r24, 0xE0	; 224
    2f62:	81 60       	ori	r24, 0x01	; 1
    2f64:	8c 93       	st	X, r24


		temprature = ADC_Single_ended_read_channel(ADC1);
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	0e 94 55 07 	call	0xeaa	; 0xeaa <ADC_Single_ended_read_channel>
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e0 57       	subi	r30, 0x70	; 112
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 83       	st	Z, r24
		temprature = 	(temprature*5/1024.0)*100.0;
    2f74:	fe 01       	movw	r30, r28
    2f76:	e0 57       	subi	r30, 0x70	; 112
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	28 2f       	mov	r18, r24
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	c9 01       	movw	r24, r18
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	82 0f       	add	r24, r18
    2f8c:	93 1f       	adc	r25, r19
    2f8e:	aa 27       	eor	r26, r26
    2f90:	97 fd       	sbrc	r25, 7
    2f92:	a0 95       	com	r26
    2f94:	ba 2f       	mov	r27, r26
    2f96:	bc 01       	movw	r22, r24
    2f98:	cd 01       	movw	r24, r26
    2f9a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	bc 01       	movw	r22, r24
    2fa4:	cd 01       	movw	r24, r26
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e8       	ldi	r20, 0x80	; 128
    2fac:	54 e4       	ldi	r21, 0x44	; 68
    2fae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	48 ec       	ldi	r20, 0xC8	; 200
    2fc0:	52 e4       	ldi	r21, 0x42	; 66
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	8e 01       	movw	r16, r28
    2fcc:	00 57       	subi	r16, 0x70	; 112
    2fce:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	f8 01       	movw	r30, r16
    2fde:	80 83       	st	Z, r24
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e7 57       	subi	r30, 0x77	; 119
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	aa e7       	ldi	r26, 0x7A	; 122
    2fec:	b4 e4       	ldi	r27, 0x44	; 68
    2fee:	80 83       	st	Z, r24
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	a2 83       	std	Z+2, r26	; 0x02
    2ff4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff6:	8e 01       	movw	r16, r28
    2ff8:	0b 57       	subi	r16, 0x7B	; 123
    2ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e7 57       	subi	r30, 0x77	; 119
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	60 81       	ld	r22, Z
    3004:	71 81       	ldd	r23, Z+1	; 0x01
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	4a e7       	ldi	r20, 0x7A	; 122
    3010:	55 e4       	ldi	r21, 0x45	; 69
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	f8 01       	movw	r30, r16
    301c:	80 83       	st	Z, r24
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	a2 83       	std	Z+2, r26	; 0x02
    3022:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3024:	fe 01       	movw	r30, r28
    3026:	eb 57       	subi	r30, 0x7B	; 123
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	93 81       	ldd	r25, Z+3	; 0x03
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e8       	ldi	r20, 0x80	; 128
    3038:	5f e3       	ldi	r21, 0x3F	; 63
    303a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    303e:	88 23       	and	r24, r24
    3040:	44 f4       	brge	.+16     	; 0x3052 <main+0x2fc>
		__ticks = 1;
    3042:	fe 01       	movw	r30, r28
    3044:	ed 57       	subi	r30, 0x7D	; 125
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	80 83       	st	Z, r24
    3050:	64 c0       	rjmp	.+200    	; 0x311a <main+0x3c4>
	else if (__tmp > 65535)
    3052:	fe 01       	movw	r30, r28
    3054:	eb 57       	subi	r30, 0x7B	; 123
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	3f ef       	ldi	r19, 0xFF	; 255
    3064:	4f e7       	ldi	r20, 0x7F	; 127
    3066:	57 e4       	ldi	r21, 0x47	; 71
    3068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306c:	18 16       	cp	r1, r24
    306e:	0c f0       	brlt	.+2      	; 0x3072 <main+0x31c>
    3070:	43 c0       	rjmp	.+134    	; 0x30f8 <main+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3072:	fe 01       	movw	r30, r28
    3074:	e7 57       	subi	r30, 0x77	; 119
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	60 81       	ld	r22, Z
    307a:	71 81       	ldd	r23, Z+1	; 0x01
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8e 01       	movw	r16, r28
    3092:	0d 57       	subi	r16, 0x7D	; 125
    3094:	1f 4f       	sbci	r17, 0xFF	; 255
    3096:	bc 01       	movw	r22, r24
    3098:	cd 01       	movw	r24, r26
    309a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	f8 01       	movw	r30, r16
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	80 83       	st	Z, r24
    30a8:	1f c0       	rjmp	.+62     	; 0x30e8 <main+0x392>
    30aa:	fe 01       	movw	r30, r28
    30ac:	ef 57       	subi	r30, 0x7F	; 127
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 e9       	ldi	r24, 0x90	; 144
    30b2:	91 e0       	ldi	r25, 0x01	; 1
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
    30b8:	fe 01       	movw	r30, r28
    30ba:	ef 57       	subi	r30, 0x7F	; 127
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 81       	ld	r24, Z
    30c0:	91 81       	ldd	r25, Z+1	; 0x01
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <main+0x36c>
    30c6:	fe 01       	movw	r30, r28
    30c8:	ef 57       	subi	r30, 0x7F	; 127
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	91 83       	std	Z+1, r25	; 0x01
    30ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d0:	de 01       	movw	r26, r28
    30d2:	ad 57       	subi	r26, 0x7D	; 125
    30d4:	bf 4f       	sbci	r27, 0xFF	; 255
    30d6:	fe 01       	movw	r30, r28
    30d8:	ed 57       	subi	r30, 0x7D	; 125
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	11 96       	adiw	r26, 0x01	; 1
    30e4:	9c 93       	st	X, r25
    30e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e8:	fe 01       	movw	r30, r28
    30ea:	ed 57       	subi	r30, 0x7D	; 125
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	d1 f6       	brne	.-76     	; 0x30aa <main+0x354>
    30f6:	27 c0       	rjmp	.+78     	; 0x3146 <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f8:	8e 01       	movw	r16, r28
    30fa:	0d 57       	subi	r16, 0x7D	; 125
    30fc:	1f 4f       	sbci	r17, 0xFF	; 255
    30fe:	fe 01       	movw	r30, r28
    3100:	eb 57       	subi	r30, 0x7B	; 123
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	60 81       	ld	r22, Z
    3106:	71 81       	ldd	r23, Z+1	; 0x01
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	93 81       	ldd	r25, Z+3	; 0x03
    310c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	f8 01       	movw	r30, r16
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	80 83       	st	Z, r24
    311a:	de 01       	movw	r26, r28
    311c:	a1 58       	subi	r26, 0x81	; 129
    311e:	bf 4f       	sbci	r27, 0xFF	; 255
    3120:	fe 01       	movw	r30, r28
    3122:	ed 57       	subi	r30, 0x7D	; 125
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	8d 93       	st	X+, r24
    312c:	9c 93       	st	X, r25
    312e:	fe 01       	movw	r30, r28
    3130:	e1 58       	subi	r30, 0x81	; 129
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <main+0x3e2>
    313c:	fe 01       	movw	r30, r28
    313e:	e1 58       	subi	r30, 0x81	; 129
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24

		_delay_ms(1000);
		UART_sendByte(COUNTER_ID);
    3146:	86 e3       	ldi	r24, 0x36	; 54
    3148:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
//		_delay_ms(5);
		UART_sendByte(counter);
    314c:	80 91 74 01 	lds	r24, 0x0174
    3150:	90 91 75 01 	lds	r25, 0x0175
    3154:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
		SevenSegment_display(counter);
    3158:	80 91 74 01 	lds	r24, 0x0174
    315c:	90 91 75 01 	lds	r25, 0x0175
    3160:	0e 94 13 20 	call	0x4026	; 0x4026 <SevenSegment_display>
    3164:	fe 01       	movw	r30, r28
    3166:	e5 58       	subi	r30, 0x85	; 133
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	aa e7       	ldi	r26, 0x7A	; 122
    3170:	b4 e4       	ldi	r27, 0x44	; 68
    3172:	80 83       	st	Z, r24
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	a2 83       	std	Z+2, r26	; 0x02
    3178:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317a:	8e 01       	movw	r16, r28
    317c:	09 58       	subi	r16, 0x89	; 137
    317e:	1f 4f       	sbci	r17, 0xFF	; 255
    3180:	fe 01       	movw	r30, r28
    3182:	e5 58       	subi	r30, 0x85	; 133
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	4a e7       	ldi	r20, 0x7A	; 122
    3194:	55 e4       	ldi	r21, 0x45	; 69
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	f8 01       	movw	r30, r16
    31a0:	80 83       	st	Z, r24
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	a2 83       	std	Z+2, r26	; 0x02
    31a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a8:	fe 01       	movw	r30, r28
    31aa:	e9 58       	subi	r30, 0x89	; 137
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e8       	ldi	r20, 0x80	; 128
    31bc:	5f e3       	ldi	r21, 0x3F	; 63
    31be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c2:	88 23       	and	r24, r24
    31c4:	44 f4       	brge	.+16     	; 0x31d6 <main+0x480>
		__ticks = 1;
    31c6:	fe 01       	movw	r30, r28
    31c8:	eb 58       	subi	r30, 0x8B	; 139
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	80 83       	st	Z, r24
    31d4:	64 c0       	rjmp	.+200    	; 0x329e <main+0x548>
	else if (__tmp > 65535)
    31d6:	fe 01       	movw	r30, r28
    31d8:	e9 58       	subi	r30, 0x89	; 137
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	3f ef       	ldi	r19, 0xFF	; 255
    31e8:	4f e7       	ldi	r20, 0x7F	; 127
    31ea:	57 e4       	ldi	r21, 0x47	; 71
    31ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f0:	18 16       	cp	r1, r24
    31f2:	0c f0       	brlt	.+2      	; 0x31f6 <main+0x4a0>
    31f4:	43 c0       	rjmp	.+134    	; 0x327c <main+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f6:	fe 01       	movw	r30, r28
    31f8:	e5 58       	subi	r30, 0x85	; 133
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	60 81       	ld	r22, Z
    31fe:	71 81       	ldd	r23, Z+1	; 0x01
    3200:	82 81       	ldd	r24, Z+2	; 0x02
    3202:	93 81       	ldd	r25, Z+3	; 0x03
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	8e 01       	movw	r16, r28
    3216:	0b 58       	subi	r16, 0x8B	; 139
    3218:	1f 4f       	sbci	r17, 0xFF	; 255
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	f8 01       	movw	r30, r16
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
    322c:	1f c0       	rjmp	.+62     	; 0x326c <main+0x516>
    322e:	fe 01       	movw	r30, r28
    3230:	ed 58       	subi	r30, 0x8D	; 141
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 e9       	ldi	r24, 0x90	; 144
    3236:	91 e0       	ldi	r25, 0x01	; 1
    3238:	91 83       	std	Z+1, r25	; 0x01
    323a:	80 83       	st	Z, r24
    323c:	fe 01       	movw	r30, r28
    323e:	ed 58       	subi	r30, 0x8D	; 141
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	91 81       	ldd	r25, Z+1	; 0x01
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <main+0x4f0>
    324a:	fe 01       	movw	r30, r28
    324c:	ed 58       	subi	r30, 0x8D	; 141
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	91 83       	std	Z+1, r25	; 0x01
    3252:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3254:	de 01       	movw	r26, r28
    3256:	ab 58       	subi	r26, 0x8B	; 139
    3258:	bf 4f       	sbci	r27, 0xFF	; 255
    325a:	fe 01       	movw	r30, r28
    325c:	eb 58       	subi	r30, 0x8B	; 139
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 81       	ld	r24, Z
    3262:	91 81       	ldd	r25, Z+1	; 0x01
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	11 96       	adiw	r26, 0x01	; 1
    3268:	9c 93       	st	X, r25
    326a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326c:	fe 01       	movw	r30, r28
    326e:	eb 58       	subi	r30, 0x8B	; 139
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	80 81       	ld	r24, Z
    3274:	91 81       	ldd	r25, Z+1	; 0x01
    3276:	00 97       	sbiw	r24, 0x00	; 0
    3278:	d1 f6       	brne	.-76     	; 0x322e <main+0x4d8>
    327a:	27 c0       	rjmp	.+78     	; 0x32ca <main+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327c:	8e 01       	movw	r16, r28
    327e:	0b 58       	subi	r16, 0x8B	; 139
    3280:	1f 4f       	sbci	r17, 0xFF	; 255
    3282:	fe 01       	movw	r30, r28
    3284:	e9 58       	subi	r30, 0x89	; 137
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	60 81       	ld	r22, Z
    328a:	71 81       	ldd	r23, Z+1	; 0x01
    328c:	82 81       	ldd	r24, Z+2	; 0x02
    328e:	93 81       	ldd	r25, Z+3	; 0x03
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	f8 01       	movw	r30, r16
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	80 83       	st	Z, r24
    329e:	de 01       	movw	r26, r28
    32a0:	af 58       	subi	r26, 0x8F	; 143
    32a2:	bf 4f       	sbci	r27, 0xFF	; 255
    32a4:	fe 01       	movw	r30, r28
    32a6:	eb 58       	subi	r30, 0x8B	; 139
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	8d 93       	st	X+, r24
    32b0:	9c 93       	st	X, r25
    32b2:	fe 01       	movw	r30, r28
    32b4:	ef 58       	subi	r30, 0x8F	; 143
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <main+0x566>
    32c0:	fe 01       	movw	r30, r28
    32c2:	ef 58       	subi	r30, 0x8F	; 143
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	80 83       	st	Z, r24
		_delay_ms(1000);

		UART_sendByte(temprature_id);
    32ca:	83 e3       	ldi	r24, 0x33	; 51
    32cc:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
    32d0:	fe 01       	movw	r30, r28
    32d2:	e3 59       	subi	r30, 0x93	; 147
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	a8 ec       	ldi	r26, 0xC8	; 200
    32dc:	b2 e4       	ldi	r27, 0x42	; 66
    32de:	80 83       	st	Z, r24
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	a2 83       	std	Z+2, r26	; 0x02
    32e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e6:	8e 01       	movw	r16, r28
    32e8:	07 59       	subi	r16, 0x97	; 151
    32ea:	1f 4f       	sbci	r17, 0xFF	; 255
    32ec:	fe 01       	movw	r30, r28
    32ee:	e3 59       	subi	r30, 0x93	; 147
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	60 81       	ld	r22, Z
    32f4:	71 81       	ldd	r23, Z+1	; 0x01
    32f6:	82 81       	ldd	r24, Z+2	; 0x02
    32f8:	93 81       	ldd	r25, Z+3	; 0x03
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	4a e7       	ldi	r20, 0x7A	; 122
    3300:	55 e4       	ldi	r21, 0x45	; 69
    3302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	f8 01       	movw	r30, r16
    330c:	80 83       	st	Z, r24
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	a2 83       	std	Z+2, r26	; 0x02
    3312:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3314:	fe 01       	movw	r30, r28
    3316:	e7 59       	subi	r30, 0x97	; 151
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	60 81       	ld	r22, Z
    331c:	71 81       	ldd	r23, Z+1	; 0x01
    331e:	82 81       	ldd	r24, Z+2	; 0x02
    3320:	93 81       	ldd	r25, Z+3	; 0x03
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	44 f4       	brge	.+16     	; 0x3342 <main+0x5ec>
		__ticks = 1;
    3332:	fe 01       	movw	r30, r28
    3334:	e9 59       	subi	r30, 0x99	; 153
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	91 83       	std	Z+1, r25	; 0x01
    333e:	80 83       	st	Z, r24
    3340:	64 c0       	rjmp	.+200    	; 0x340a <main+0x6b4>
	else if (__tmp > 65535)
    3342:	fe 01       	movw	r30, r28
    3344:	e7 59       	subi	r30, 0x97	; 151
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	60 81       	ld	r22, Z
    334a:	71 81       	ldd	r23, Z+1	; 0x01
    334c:	82 81       	ldd	r24, Z+2	; 0x02
    334e:	93 81       	ldd	r25, Z+3	; 0x03
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	3f ef       	ldi	r19, 0xFF	; 255
    3354:	4f e7       	ldi	r20, 0x7F	; 127
    3356:	57 e4       	ldi	r21, 0x47	; 71
    3358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    335c:	18 16       	cp	r1, r24
    335e:	0c f0       	brlt	.+2      	; 0x3362 <main+0x60c>
    3360:	43 c0       	rjmp	.+134    	; 0x33e8 <main+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3362:	fe 01       	movw	r30, r28
    3364:	e3 59       	subi	r30, 0x93	; 147
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	60 81       	ld	r22, Z
    336a:	71 81       	ldd	r23, Z+1	; 0x01
    336c:	82 81       	ldd	r24, Z+2	; 0x02
    336e:	93 81       	ldd	r25, Z+3	; 0x03
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e2       	ldi	r20, 0x20	; 32
    3376:	51 e4       	ldi	r21, 0x41	; 65
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	8e 01       	movw	r16, r28
    3382:	09 59       	subi	r16, 0x99	; 153
    3384:	1f 4f       	sbci	r17, 0xFF	; 255
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	f8 01       	movw	r30, r16
    3394:	91 83       	std	Z+1, r25	; 0x01
    3396:	80 83       	st	Z, r24
    3398:	1f c0       	rjmp	.+62     	; 0x33d8 <main+0x682>
    339a:	fe 01       	movw	r30, r28
    339c:	eb 59       	subi	r30, 0x9B	; 155
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 e9       	ldi	r24, 0x90	; 144
    33a2:	91 e0       	ldi	r25, 0x01	; 1
    33a4:	91 83       	std	Z+1, r25	; 0x01
    33a6:	80 83       	st	Z, r24
    33a8:	fe 01       	movw	r30, r28
    33aa:	eb 59       	subi	r30, 0x9B	; 155
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	80 81       	ld	r24, Z
    33b0:	91 81       	ldd	r25, Z+1	; 0x01
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <main+0x65c>
    33b6:	fe 01       	movw	r30, r28
    33b8:	eb 59       	subi	r30, 0x9B	; 155
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	91 83       	std	Z+1, r25	; 0x01
    33be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c0:	de 01       	movw	r26, r28
    33c2:	a9 59       	subi	r26, 0x99	; 153
    33c4:	bf 4f       	sbci	r27, 0xFF	; 255
    33c6:	fe 01       	movw	r30, r28
    33c8:	e9 59       	subi	r30, 0x99	; 153
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	80 81       	ld	r24, Z
    33ce:	91 81       	ldd	r25, Z+1	; 0x01
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	11 96       	adiw	r26, 0x01	; 1
    33d4:	9c 93       	st	X, r25
    33d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d8:	fe 01       	movw	r30, r28
    33da:	e9 59       	subi	r30, 0x99	; 153
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	80 81       	ld	r24, Z
    33e0:	91 81       	ldd	r25, Z+1	; 0x01
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	d1 f6       	brne	.-76     	; 0x339a <main+0x644>
    33e6:	27 c0       	rjmp	.+78     	; 0x3436 <main+0x6e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e8:	8e 01       	movw	r16, r28
    33ea:	09 59       	subi	r16, 0x99	; 153
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	fe 01       	movw	r30, r28
    33f0:	e7 59       	subi	r30, 0x97	; 151
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	60 81       	ld	r22, Z
    33f6:	71 81       	ldd	r23, Z+1	; 0x01
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	93 81       	ldd	r25, Z+3	; 0x03
    33fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	f8 01       	movw	r30, r16
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	80 83       	st	Z, r24
    340a:	de 01       	movw	r26, r28
    340c:	ad 59       	subi	r26, 0x9D	; 157
    340e:	bf 4f       	sbci	r27, 0xFF	; 255
    3410:	fe 01       	movw	r30, r28
    3412:	e9 59       	subi	r30, 0x99	; 153
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	8d 93       	st	X+, r24
    341c:	9c 93       	st	X, r25
    341e:	fe 01       	movw	r30, r28
    3420:	ed 59       	subi	r30, 0x9D	; 157
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <main+0x6d2>
    342c:	fe 01       	movw	r30, r28
    342e:	ed 59       	subi	r30, 0x9D	; 157
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
		_delay_ms(100);
		UART_sendByte(temprature);
    3436:	fe 01       	movw	r30, r28
    3438:	e0 57       	subi	r30, 0x70	; 112
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	80 81       	ld	r24, Z
    343e:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
    3442:	fe 01       	movw	r30, r28
    3444:	e1 5a       	subi	r30, 0xA1	; 161
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	a8 ec       	ldi	r26, 0xC8	; 200
    344e:	b2 e4       	ldi	r27, 0x42	; 66
    3450:	80 83       	st	Z, r24
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	a2 83       	std	Z+2, r26	; 0x02
    3456:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3458:	8e 01       	movw	r16, r28
    345a:	05 5a       	subi	r16, 0xA5	; 165
    345c:	1f 4f       	sbci	r17, 0xFF	; 255
    345e:	fe 01       	movw	r30, r28
    3460:	e1 5a       	subi	r30, 0xA1	; 161
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	60 81       	ld	r22, Z
    3466:	71 81       	ldd	r23, Z+1	; 0x01
    3468:	82 81       	ldd	r24, Z+2	; 0x02
    346a:	93 81       	ldd	r25, Z+3	; 0x03
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	4a e7       	ldi	r20, 0x7A	; 122
    3472:	55 e4       	ldi	r21, 0x45	; 69
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	f8 01       	movw	r30, r16
    347e:	80 83       	st	Z, r24
    3480:	91 83       	std	Z+1, r25	; 0x01
    3482:	a2 83       	std	Z+2, r26	; 0x02
    3484:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3486:	fe 01       	movw	r30, r28
    3488:	e5 5a       	subi	r30, 0xA5	; 165
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	60 81       	ld	r22, Z
    348e:	71 81       	ldd	r23, Z+1	; 0x01
    3490:	82 81       	ldd	r24, Z+2	; 0x02
    3492:	93 81       	ldd	r25, Z+3	; 0x03
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e8       	ldi	r20, 0x80	; 128
    349a:	5f e3       	ldi	r21, 0x3F	; 63
    349c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a0:	88 23       	and	r24, r24
    34a2:	44 f4       	brge	.+16     	; 0x34b4 <main+0x75e>
		__ticks = 1;
    34a4:	fe 01       	movw	r30, r28
    34a6:	e7 5a       	subi	r30, 0xA7	; 167
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	80 83       	st	Z, r24
    34b2:	64 c0       	rjmp	.+200    	; 0x357c <main+0x826>
	else if (__tmp > 65535)
    34b4:	fe 01       	movw	r30, r28
    34b6:	e5 5a       	subi	r30, 0xA5	; 165
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	60 81       	ld	r22, Z
    34bc:	71 81       	ldd	r23, Z+1	; 0x01
    34be:	82 81       	ldd	r24, Z+2	; 0x02
    34c0:	93 81       	ldd	r25, Z+3	; 0x03
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	3f ef       	ldi	r19, 0xFF	; 255
    34c6:	4f e7       	ldi	r20, 0x7F	; 127
    34c8:	57 e4       	ldi	r21, 0x47	; 71
    34ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ce:	18 16       	cp	r1, r24
    34d0:	0c f0       	brlt	.+2      	; 0x34d4 <main+0x77e>
    34d2:	43 c0       	rjmp	.+134    	; 0x355a <main+0x804>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d4:	fe 01       	movw	r30, r28
    34d6:	e1 5a       	subi	r30, 0xA1	; 161
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	60 81       	ld	r22, Z
    34dc:	71 81       	ldd	r23, Z+1	; 0x01
    34de:	82 81       	ldd	r24, Z+2	; 0x02
    34e0:	93 81       	ldd	r25, Z+3	; 0x03
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e2       	ldi	r20, 0x20	; 32
    34e8:	51 e4       	ldi	r21, 0x41	; 65
    34ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	8e 01       	movw	r16, r28
    34f4:	07 5a       	subi	r16, 0xA7	; 167
    34f6:	1f 4f       	sbci	r17, 0xFF	; 255
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	f8 01       	movw	r30, r16
    3506:	91 83       	std	Z+1, r25	; 0x01
    3508:	80 83       	st	Z, r24
    350a:	1f c0       	rjmp	.+62     	; 0x354a <main+0x7f4>
    350c:	fe 01       	movw	r30, r28
    350e:	e9 5a       	subi	r30, 0xA9	; 169
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	80 e9       	ldi	r24, 0x90	; 144
    3514:	91 e0       	ldi	r25, 0x01	; 1
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	80 83       	st	Z, r24
    351a:	fe 01       	movw	r30, r28
    351c:	e9 5a       	subi	r30, 0xA9	; 169
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	80 81       	ld	r24, Z
    3522:	91 81       	ldd	r25, Z+1	; 0x01
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <main+0x7ce>
    3528:	fe 01       	movw	r30, r28
    352a:	e9 5a       	subi	r30, 0xA9	; 169
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	91 83       	std	Z+1, r25	; 0x01
    3530:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3532:	de 01       	movw	r26, r28
    3534:	a7 5a       	subi	r26, 0xA7	; 167
    3536:	bf 4f       	sbci	r27, 0xFF	; 255
    3538:	fe 01       	movw	r30, r28
    353a:	e7 5a       	subi	r30, 0xA7	; 167
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	11 96       	adiw	r26, 0x01	; 1
    3546:	9c 93       	st	X, r25
    3548:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354a:	fe 01       	movw	r30, r28
    354c:	e7 5a       	subi	r30, 0xA7	; 167
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	d1 f6       	brne	.-76     	; 0x350c <main+0x7b6>
    3558:	27 c0       	rjmp	.+78     	; 0x35a8 <main+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355a:	8e 01       	movw	r16, r28
    355c:	07 5a       	subi	r16, 0xA7	; 167
    355e:	1f 4f       	sbci	r17, 0xFF	; 255
    3560:	fe 01       	movw	r30, r28
    3562:	e5 5a       	subi	r30, 0xA5	; 165
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	60 81       	ld	r22, Z
    3568:	71 81       	ldd	r23, Z+1	; 0x01
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	93 81       	ldd	r25, Z+3	; 0x03
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	f8 01       	movw	r30, r16
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	80 83       	st	Z, r24
    357c:	de 01       	movw	r26, r28
    357e:	ab 5a       	subi	r26, 0xAB	; 171
    3580:	bf 4f       	sbci	r27, 0xFF	; 255
    3582:	fe 01       	movw	r30, r28
    3584:	e7 5a       	subi	r30, 0xA7	; 167
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	80 81       	ld	r24, Z
    358a:	91 81       	ldd	r25, Z+1	; 0x01
    358c:	8d 93       	st	X+, r24
    358e:	9c 93       	st	X, r25
    3590:	fe 01       	movw	r30, r28
    3592:	eb 5a       	subi	r30, 0xAB	; 171
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <main+0x844>
    359e:	fe 01       	movw	r30, r28
    35a0:	eb 5a       	subi	r30, 0xAB	; 171
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	80 83       	st	Z, r24

		_delay_ms(100);



		CO2 = ADC_Single_ended_read_channel(ADC2);
    35a8:	82 e0       	ldi	r24, 0x02	; 2
    35aa:	0e 94 55 07 	call	0xeaa	; 0xeaa <ADC_Single_ended_read_channel>
    35ae:	fe 01       	movw	r30, r28
    35b0:	e2 57       	subi	r30, 0x72	; 114
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 83       	st	Z, r24
		//		CO2  = 100 - ( (light_intensty/500.0)*100.0 ) ;

		UART_sendByte(co2_id);
    35b6:	81 e3       	ldi	r24, 0x31	; 49
    35b8:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
    35bc:	fe 01       	movw	r30, r28
    35be:	ef 5a       	subi	r30, 0xAF	; 175
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	a8 ec       	ldi	r26, 0xC8	; 200
    35c8:	b2 e4       	ldi	r27, 0x42	; 66
    35ca:	80 83       	st	Z, r24
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	a2 83       	std	Z+2, r26	; 0x02
    35d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	8e 01       	movw	r16, r28
    35d4:	03 5b       	subi	r16, 0xB3	; 179
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	ef 5a       	subi	r30, 0xAF	; 175
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	4a e7       	ldi	r20, 0x7A	; 122
    35ec:	55 e4       	ldi	r21, 0x45	; 69
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	f8 01       	movw	r30, r16
    35f8:	80 83       	st	Z, r24
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	a2 83       	std	Z+2, r26	; 0x02
    35fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3600:	fe 01       	movw	r30, r28
    3602:	e3 5b       	subi	r30, 0xB3	; 179
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	60 81       	ld	r22, Z
    3608:	71 81       	ldd	r23, Z+1	; 0x01
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	93 81       	ldd	r25, Z+3	; 0x03
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	40 e8       	ldi	r20, 0x80	; 128
    3614:	5f e3       	ldi	r21, 0x3F	; 63
    3616:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    361a:	88 23       	and	r24, r24
    361c:	44 f4       	brge	.+16     	; 0x362e <main+0x8d8>
		__ticks = 1;
    361e:	fe 01       	movw	r30, r28
    3620:	e5 5b       	subi	r30, 0xB5	; 181
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	91 83       	std	Z+1, r25	; 0x01
    362a:	80 83       	st	Z, r24
    362c:	64 c0       	rjmp	.+200    	; 0x36f6 <main+0x9a0>
	else if (__tmp > 65535)
    362e:	fe 01       	movw	r30, r28
    3630:	e3 5b       	subi	r30, 0xB3	; 179
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	3f ef       	ldi	r19, 0xFF	; 255
    3640:	4f e7       	ldi	r20, 0x7F	; 127
    3642:	57 e4       	ldi	r21, 0x47	; 71
    3644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3648:	18 16       	cp	r1, r24
    364a:	0c f0       	brlt	.+2      	; 0x364e <main+0x8f8>
    364c:	43 c0       	rjmp	.+134    	; 0x36d4 <main+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364e:	fe 01       	movw	r30, r28
    3650:	ef 5a       	subi	r30, 0xAF	; 175
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	60 81       	ld	r22, Z
    3656:	71 81       	ldd	r23, Z+1	; 0x01
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	93 81       	ldd	r25, Z+3	; 0x03
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e2       	ldi	r20, 0x20	; 32
    3662:	51 e4       	ldi	r21, 0x41	; 65
    3664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	8e 01       	movw	r16, r28
    366e:	05 5b       	subi	r16, 0xB5	; 181
    3670:	1f 4f       	sbci	r17, 0xFF	; 255
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	f8 01       	movw	r30, r16
    3680:	91 83       	std	Z+1, r25	; 0x01
    3682:	80 83       	st	Z, r24
    3684:	1f c0       	rjmp	.+62     	; 0x36c4 <main+0x96e>
    3686:	fe 01       	movw	r30, r28
    3688:	e7 5b       	subi	r30, 0xB7	; 183
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 e9       	ldi	r24, 0x90	; 144
    368e:	91 e0       	ldi	r25, 0x01	; 1
    3690:	91 83       	std	Z+1, r25	; 0x01
    3692:	80 83       	st	Z, r24
    3694:	fe 01       	movw	r30, r28
    3696:	e7 5b       	subi	r30, 0xB7	; 183
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 81       	ld	r24, Z
    369c:	91 81       	ldd	r25, Z+1	; 0x01
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <main+0x948>
    36a2:	fe 01       	movw	r30, r28
    36a4:	e7 5b       	subi	r30, 0xB7	; 183
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	91 83       	std	Z+1, r25	; 0x01
    36aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ac:	de 01       	movw	r26, r28
    36ae:	a5 5b       	subi	r26, 0xB5	; 181
    36b0:	bf 4f       	sbci	r27, 0xFF	; 255
    36b2:	fe 01       	movw	r30, r28
    36b4:	e5 5b       	subi	r30, 0xB5	; 181
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	80 81       	ld	r24, Z
    36ba:	91 81       	ldd	r25, Z+1	; 0x01
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	11 96       	adiw	r26, 0x01	; 1
    36c0:	9c 93       	st	X, r25
    36c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c4:	fe 01       	movw	r30, r28
    36c6:	e5 5b       	subi	r30, 0xB5	; 181
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	80 81       	ld	r24, Z
    36cc:	91 81       	ldd	r25, Z+1	; 0x01
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	d1 f6       	brne	.-76     	; 0x3686 <main+0x930>
    36d2:	27 c0       	rjmp	.+78     	; 0x3722 <main+0x9cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	8e 01       	movw	r16, r28
    36d6:	05 5b       	subi	r16, 0xB5	; 181
    36d8:	1f 4f       	sbci	r17, 0xFF	; 255
    36da:	fe 01       	movw	r30, r28
    36dc:	e3 5b       	subi	r30, 0xB3	; 179
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	60 81       	ld	r22, Z
    36e2:	71 81       	ldd	r23, Z+1	; 0x01
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	93 81       	ldd	r25, Z+3	; 0x03
    36e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	f8 01       	movw	r30, r16
    36f2:	91 83       	std	Z+1, r25	; 0x01
    36f4:	80 83       	st	Z, r24
    36f6:	de 01       	movw	r26, r28
    36f8:	a9 5b       	subi	r26, 0xB9	; 185
    36fa:	bf 4f       	sbci	r27, 0xFF	; 255
    36fc:	fe 01       	movw	r30, r28
    36fe:	e5 5b       	subi	r30, 0xB5	; 181
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 81       	ld	r24, Z
    3704:	91 81       	ldd	r25, Z+1	; 0x01
    3706:	8d 93       	st	X+, r24
    3708:	9c 93       	st	X, r25
    370a:	fe 01       	movw	r30, r28
    370c:	e9 5b       	subi	r30, 0xB9	; 185
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <main+0x9be>
    3718:	fe 01       	movw	r30, r28
    371a:	e9 5b       	subi	r30, 0xB9	; 185
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
		_delay_ms(100);
		UART_sendByte(CO2);
    3722:	fe 01       	movw	r30, r28
    3724:	e2 57       	subi	r30, 0x72	; 114
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	80 81       	ld	r24, Z
    372a:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
    372e:	fe 01       	movw	r30, r28
    3730:	ed 5b       	subi	r30, 0xBD	; 189
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	a8 ec       	ldi	r26, 0xC8	; 200
    373a:	b2 e4       	ldi	r27, 0x42	; 66
    373c:	80 83       	st	Z, r24
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	a2 83       	std	Z+2, r26	; 0x02
    3742:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3744:	8e 01       	movw	r16, r28
    3746:	01 5c       	subi	r16, 0xC1	; 193
    3748:	1f 4f       	sbci	r17, 0xFF	; 255
    374a:	fe 01       	movw	r30, r28
    374c:	ed 5b       	subi	r30, 0xBD	; 189
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	60 81       	ld	r22, Z
    3752:	71 81       	ldd	r23, Z+1	; 0x01
    3754:	82 81       	ldd	r24, Z+2	; 0x02
    3756:	93 81       	ldd	r25, Z+3	; 0x03
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	4a e7       	ldi	r20, 0x7A	; 122
    375e:	55 e4       	ldi	r21, 0x45	; 69
    3760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	f8 01       	movw	r30, r16
    376a:	80 83       	st	Z, r24
    376c:	91 83       	std	Z+1, r25	; 0x01
    376e:	a2 83       	std	Z+2, r26	; 0x02
    3770:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3772:	fe 01       	movw	r30, r28
    3774:	ff 96       	adiw	r30, 0x3f	; 63
    3776:	60 81       	ld	r22, Z
    3778:	71 81       	ldd	r23, Z+1	; 0x01
    377a:	82 81       	ldd	r24, Z+2	; 0x02
    377c:	93 81       	ldd	r25, Z+3	; 0x03
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e8       	ldi	r20, 0x80	; 128
    3784:	5f e3       	ldi	r21, 0x3F	; 63
    3786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    378a:	88 23       	and	r24, r24
    378c:	2c f4       	brge	.+10     	; 0x3798 <main+0xa42>
		__ticks = 1;
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	9e af       	std	Y+62, r25	; 0x3e
    3794:	8d af       	std	Y+61, r24	; 0x3d
    3796:	46 c0       	rjmp	.+140    	; 0x3824 <main+0xace>
	else if (__tmp > 65535)
    3798:	fe 01       	movw	r30, r28
    379a:	ff 96       	adiw	r30, 0x3f	; 63
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	3f ef       	ldi	r19, 0xFF	; 255
    37a8:	4f e7       	ldi	r20, 0x7F	; 127
    37aa:	57 e4       	ldi	r21, 0x47	; 71
    37ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b0:	18 16       	cp	r1, r24
    37b2:	64 f5       	brge	.+88     	; 0x380c <main+0xab6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b4:	fe 01       	movw	r30, r28
    37b6:	ed 5b       	subi	r30, 0xBD	; 189
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	60 81       	ld	r22, Z
    37bc:	71 81       	ldd	r23, Z+1	; 0x01
    37be:	82 81       	ldd	r24, Z+2	; 0x02
    37c0:	93 81       	ldd	r25, Z+3	; 0x03
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e2       	ldi	r20, 0x20	; 32
    37c8:	51 e4       	ldi	r21, 0x41	; 65
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	bc 01       	movw	r22, r24
    37d4:	cd 01       	movw	r24, r26
    37d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	9e af       	std	Y+62, r25	; 0x3e
    37e0:	8d af       	std	Y+61, r24	; 0x3d
    37e2:	0f c0       	rjmp	.+30     	; 0x3802 <main+0xaac>
    37e4:	80 e9       	ldi	r24, 0x90	; 144
    37e6:	91 e0       	ldi	r25, 0x01	; 1
    37e8:	9c af       	std	Y+60, r25	; 0x3c
    37ea:	8b af       	std	Y+59, r24	; 0x3b
    37ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    37ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <main+0xa9a>
    37f4:	9c af       	std	Y+60, r25	; 0x3c
    37f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    37fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	9e af       	std	Y+62, r25	; 0x3e
    3800:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3802:	8d ad       	ldd	r24, Y+61	; 0x3d
    3804:	9e ad       	ldd	r25, Y+62	; 0x3e
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	69 f7       	brne	.-38     	; 0x37e4 <main+0xa8e>
    380a:	16 c0       	rjmp	.+44     	; 0x3838 <main+0xae2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380c:	fe 01       	movw	r30, r28
    380e:	ff 96       	adiw	r30, 0x3f	; 63
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	9e af       	std	Y+62, r25	; 0x3e
    3822:	8d af       	std	Y+61, r24	; 0x3d
    3824:	8d ad       	ldd	r24, Y+61	; 0x3d
    3826:	9e ad       	ldd	r25, Y+62	; 0x3e
    3828:	9a af       	std	Y+58, r25	; 0x3a
    382a:	89 af       	std	Y+57, r24	; 0x39
    382c:	89 ad       	ldd	r24, Y+57	; 0x39
    382e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <main+0xada>
    3834:	9a af       	std	Y+58, r25	; 0x3a
    3836:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(100);


		flame = ADC_Single_ended_read_channel(ADC3);
    3838:	83 e0       	ldi	r24, 0x03	; 3
    383a:	0e 94 55 07 	call	0xeaa	; 0xeaa <ADC_Single_ended_read_channel>
    383e:	fe 01       	movw	r30, r28
    3840:	e3 57       	subi	r30, 0x73	; 115
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	80 83       	st	Z, r24

		UART_sendByte(frame_id);
    3846:	82 e3       	ldi	r24, 0x32	; 50
    3848:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	a8 ec       	ldi	r26, 0xC8	; 200
    3852:	b2 e4       	ldi	r27, 0x42	; 66
    3854:	8d ab       	std	Y+53, r24	; 0x35
    3856:	9e ab       	std	Y+54, r25	; 0x36
    3858:	af ab       	std	Y+55, r26	; 0x37
    385a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    385c:	6d a9       	ldd	r22, Y+53	; 0x35
    385e:	7e a9       	ldd	r23, Y+54	; 0x36
    3860:	8f a9       	ldd	r24, Y+55	; 0x37
    3862:	98 ad       	ldd	r25, Y+56	; 0x38
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	4a e7       	ldi	r20, 0x7A	; 122
    386a:	55 e4       	ldi	r21, 0x45	; 69
    386c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	89 ab       	std	Y+49, r24	; 0x31
    3876:	9a ab       	std	Y+50, r25	; 0x32
    3878:	ab ab       	std	Y+51, r26	; 0x33
    387a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    387c:	69 a9       	ldd	r22, Y+49	; 0x31
    387e:	7a a9       	ldd	r23, Y+50	; 0x32
    3880:	8b a9       	ldd	r24, Y+51	; 0x33
    3882:	9c a9       	ldd	r25, Y+52	; 0x34
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e8       	ldi	r20, 0x80	; 128
    388a:	5f e3       	ldi	r21, 0x3F	; 63
    388c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3890:	88 23       	and	r24, r24
    3892:	2c f4       	brge	.+10     	; 0x389e <main+0xb48>
		__ticks = 1;
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	98 ab       	std	Y+48, r25	; 0x30
    389a:	8f a7       	std	Y+47, r24	; 0x2f
    389c:	3f c0       	rjmp	.+126    	; 0x391c <main+0xbc6>
	else if (__tmp > 65535)
    389e:	69 a9       	ldd	r22, Y+49	; 0x31
    38a0:	7a a9       	ldd	r23, Y+50	; 0x32
    38a2:	8b a9       	ldd	r24, Y+51	; 0x33
    38a4:	9c a9       	ldd	r25, Y+52	; 0x34
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	3f ef       	ldi	r19, 0xFF	; 255
    38aa:	4f e7       	ldi	r20, 0x7F	; 127
    38ac:	57 e4       	ldi	r21, 0x47	; 71
    38ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38b2:	18 16       	cp	r1, r24
    38b4:	4c f5       	brge	.+82     	; 0x3908 <main+0xbb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b6:	6d a9       	ldd	r22, Y+53	; 0x35
    38b8:	7e a9       	ldd	r23, Y+54	; 0x36
    38ba:	8f a9       	ldd	r24, Y+55	; 0x37
    38bc:	98 ad       	ldd	r25, Y+56	; 0x38
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	40 e2       	ldi	r20, 0x20	; 32
    38c4:	51 e4       	ldi	r21, 0x41	; 65
    38c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	bc 01       	movw	r22, r24
    38d0:	cd 01       	movw	r24, r26
    38d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	98 ab       	std	Y+48, r25	; 0x30
    38dc:	8f a7       	std	Y+47, r24	; 0x2f
    38de:	0f c0       	rjmp	.+30     	; 0x38fe <main+0xba8>
    38e0:	80 e9       	ldi	r24, 0x90	; 144
    38e2:	91 e0       	ldi	r25, 0x01	; 1
    38e4:	9e a7       	std	Y+46, r25	; 0x2e
    38e6:	8d a7       	std	Y+45, r24	; 0x2d
    38e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    38ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	f1 f7       	brne	.-4      	; 0x38ec <main+0xb96>
    38f0:	9e a7       	std	Y+46, r25	; 0x2e
    38f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38f6:	98 a9       	ldd	r25, Y+48	; 0x30
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	98 ab       	std	Y+48, r25	; 0x30
    38fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3900:	98 a9       	ldd	r25, Y+48	; 0x30
    3902:	00 97       	sbiw	r24, 0x00	; 0
    3904:	69 f7       	brne	.-38     	; 0x38e0 <main+0xb8a>
    3906:	14 c0       	rjmp	.+40     	; 0x3930 <main+0xbda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3908:	69 a9       	ldd	r22, Y+49	; 0x31
    390a:	7a a9       	ldd	r23, Y+50	; 0x32
    390c:	8b a9       	ldd	r24, Y+51	; 0x33
    390e:	9c a9       	ldd	r25, Y+52	; 0x34
    3910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	98 ab       	std	Y+48, r25	; 0x30
    391a:	8f a7       	std	Y+47, r24	; 0x2f
    391c:	8f a5       	ldd	r24, Y+47	; 0x2f
    391e:	98 a9       	ldd	r25, Y+48	; 0x30
    3920:	9c a7       	std	Y+44, r25	; 0x2c
    3922:	8b a7       	std	Y+43, r24	; 0x2b
    3924:	8b a5       	ldd	r24, Y+43	; 0x2b
    3926:	9c a5       	ldd	r25, Y+44	; 0x2c
    3928:	01 97       	sbiw	r24, 0x01	; 1
    392a:	f1 f7       	brne	.-4      	; 0x3928 <main+0xbd2>
    392c:	9c a7       	std	Y+44, r25	; 0x2c
    392e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		UART_sendByte(flame);
    3930:	fe 01       	movw	r30, r28
    3932:	e3 57       	subi	r30, 0x73	; 115
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	80 81       	ld	r24, Z
    3938:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	a8 ec       	ldi	r26, 0xC8	; 200
    3942:	b2 e4       	ldi	r27, 0x42	; 66
    3944:	8f a3       	std	Y+39, r24	; 0x27
    3946:	98 a7       	std	Y+40, r25	; 0x28
    3948:	a9 a7       	std	Y+41, r26	; 0x29
    394a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394c:	6f a1       	ldd	r22, Y+39	; 0x27
    394e:	78 a5       	ldd	r23, Y+40	; 0x28
    3950:	89 a5       	ldd	r24, Y+41	; 0x29
    3952:	9a a5       	ldd	r25, Y+42	; 0x2a
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	4a e7       	ldi	r20, 0x7A	; 122
    395a:	55 e4       	ldi	r21, 0x45	; 69
    395c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	8b a3       	std	Y+35, r24	; 0x23
    3966:	9c a3       	std	Y+36, r25	; 0x24
    3968:	ad a3       	std	Y+37, r26	; 0x25
    396a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    396c:	6b a1       	ldd	r22, Y+35	; 0x23
    396e:	7c a1       	ldd	r23, Y+36	; 0x24
    3970:	8d a1       	ldd	r24, Y+37	; 0x25
    3972:	9e a1       	ldd	r25, Y+38	; 0x26
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e8       	ldi	r20, 0x80	; 128
    397a:	5f e3       	ldi	r21, 0x3F	; 63
    397c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3980:	88 23       	and	r24, r24
    3982:	2c f4       	brge	.+10     	; 0x398e <main+0xc38>
		__ticks = 1;
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	9a a3       	std	Y+34, r25	; 0x22
    398a:	89 a3       	std	Y+33, r24	; 0x21
    398c:	3f c0       	rjmp	.+126    	; 0x3a0c <main+0xcb6>
	else if (__tmp > 65535)
    398e:	6b a1       	ldd	r22, Y+35	; 0x23
    3990:	7c a1       	ldd	r23, Y+36	; 0x24
    3992:	8d a1       	ldd	r24, Y+37	; 0x25
    3994:	9e a1       	ldd	r25, Y+38	; 0x26
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	3f ef       	ldi	r19, 0xFF	; 255
    399a:	4f e7       	ldi	r20, 0x7F	; 127
    399c:	57 e4       	ldi	r21, 0x47	; 71
    399e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39a2:	18 16       	cp	r1, r24
    39a4:	4c f5       	brge	.+82     	; 0x39f8 <main+0xca2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a6:	6f a1       	ldd	r22, Y+39	; 0x27
    39a8:	78 a5       	ldd	r23, Y+40	; 0x28
    39aa:	89 a5       	ldd	r24, Y+41	; 0x29
    39ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	40 e2       	ldi	r20, 0x20	; 32
    39b4:	51 e4       	ldi	r21, 0x41	; 65
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	bc 01       	movw	r22, r24
    39c0:	cd 01       	movw	r24, r26
    39c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	9a a3       	std	Y+34, r25	; 0x22
    39cc:	89 a3       	std	Y+33, r24	; 0x21
    39ce:	0f c0       	rjmp	.+30     	; 0x39ee <main+0xc98>
    39d0:	80 e9       	ldi	r24, 0x90	; 144
    39d2:	91 e0       	ldi	r25, 0x01	; 1
    39d4:	98 a3       	std	Y+32, r25	; 0x20
    39d6:	8f 8f       	std	Y+31, r24	; 0x1f
    39d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39da:	98 a1       	ldd	r25, Y+32	; 0x20
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <main+0xc86>
    39e0:	98 a3       	std	Y+32, r25	; 0x20
    39e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e4:	89 a1       	ldd	r24, Y+33	; 0x21
    39e6:	9a a1       	ldd	r25, Y+34	; 0x22
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	9a a3       	std	Y+34, r25	; 0x22
    39ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ee:	89 a1       	ldd	r24, Y+33	; 0x21
    39f0:	9a a1       	ldd	r25, Y+34	; 0x22
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	69 f7       	brne	.-38     	; 0x39d0 <main+0xc7a>
    39f6:	14 c0       	rjmp	.+40     	; 0x3a20 <main+0xcca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f8:	6b a1       	ldd	r22, Y+35	; 0x23
    39fa:	7c a1       	ldd	r23, Y+36	; 0x24
    39fc:	8d a1       	ldd	r24, Y+37	; 0x25
    39fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	9a a3       	std	Y+34, r25	; 0x22
    3a0a:	89 a3       	std	Y+33, r24	; 0x21
    3a0c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a0e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a10:	9e 8f       	std	Y+30, r25	; 0x1e
    3a12:	8d 8f       	std	Y+29, r24	; 0x1d
    3a14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <main+0xcc2>
    3a1c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a1e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);




		if( ! (PINA & (1<<4)) )
    3a20:	e9 e3       	ldi	r30, 0x39	; 57
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	80 81       	ld	r24, Z
    3a26:	88 2f       	mov	r24, r24
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	80 71       	andi	r24, 0x10	; 16
    3a2c:	90 70       	andi	r25, 0x00	; 0
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	41 f4       	brne	.+16     	; 0x3a42 <main+0xcec>
		{
			GPIO_writePin( PORTC_ID , PIN6_ID , 1 );
    3a32:	82 e0       	ldi	r24, 0x02	; 2
    3a34:	66 e0       	ldi	r22, 0x06	; 6
    3a36:	41 e0       	ldi	r20, 0x01	; 1
    3a38:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
			UART_sendByte( FIRE_IS_DETECTED ) ;
    3a3c:	84 e3       	ldi	r24, 0x34	; 52
    3a3e:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	a8 ec       	ldi	r26, 0xC8	; 200
    3a48:	b2 e4       	ldi	r27, 0x42	; 66
    3a4a:	89 8f       	std	Y+25, r24	; 0x19
    3a4c:	9a 8f       	std	Y+26, r25	; 0x1a
    3a4e:	ab 8f       	std	Y+27, r26	; 0x1b
    3a50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a52:	69 8d       	ldd	r22, Y+25	; 0x19
    3a54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	4a e7       	ldi	r20, 0x7A	; 122
    3a60:	55 e4       	ldi	r21, 0x45	; 69
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	8d 8b       	std	Y+21, r24	; 0x15
    3a6c:	9e 8b       	std	Y+22, r25	; 0x16
    3a6e:	af 8b       	std	Y+23, r26	; 0x17
    3a70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a72:	6d 89       	ldd	r22, Y+21	; 0x15
    3a74:	7e 89       	ldd	r23, Y+22	; 0x16
    3a76:	8f 89       	ldd	r24, Y+23	; 0x17
    3a78:	98 8d       	ldd	r25, Y+24	; 0x18
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e8       	ldi	r20, 0x80	; 128
    3a80:	5f e3       	ldi	r21, 0x3F	; 63
    3a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a86:	88 23       	and	r24, r24
    3a88:	2c f4       	brge	.+10     	; 0x3a94 <main+0xd3e>
		__ticks = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	9c 8b       	std	Y+20, r25	; 0x14
    3a90:	8b 8b       	std	Y+19, r24	; 0x13
    3a92:	3f c0       	rjmp	.+126    	; 0x3b12 <main+0xdbc>
	else if (__tmp > 65535)
    3a94:	6d 89       	ldd	r22, Y+21	; 0x15
    3a96:	7e 89       	ldd	r23, Y+22	; 0x16
    3a98:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	57 e4       	ldi	r21, 0x47	; 71
    3aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa8:	18 16       	cp	r1, r24
    3aaa:	4c f5       	brge	.+82     	; 0x3afe <main+0xda8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aac:	69 8d       	ldd	r22, Y+25	; 0x19
    3aae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ab0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ab2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e2       	ldi	r20, 0x20	; 32
    3aba:	51 e4       	ldi	r21, 0x41	; 65
    3abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	bc 01       	movw	r22, r24
    3ac6:	cd 01       	movw	r24, r26
    3ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	9c 8b       	std	Y+20, r25	; 0x14
    3ad2:	8b 8b       	std	Y+19, r24	; 0x13
    3ad4:	0f c0       	rjmp	.+30     	; 0x3af4 <main+0xd9e>
    3ad6:	80 e9       	ldi	r24, 0x90	; 144
    3ad8:	91 e0       	ldi	r25, 0x01	; 1
    3ada:	9a 8b       	std	Y+18, r25	; 0x12
    3adc:	89 8b       	std	Y+17, r24	; 0x11
    3ade:	89 89       	ldd	r24, Y+17	; 0x11
    3ae0:	9a 89       	ldd	r25, Y+18	; 0x12
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <main+0xd8c>
    3ae6:	9a 8b       	std	Y+18, r25	; 0x12
    3ae8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aea:	8b 89       	ldd	r24, Y+19	; 0x13
    3aec:	9c 89       	ldd	r25, Y+20	; 0x14
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	9c 8b       	std	Y+20, r25	; 0x14
    3af2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af4:	8b 89       	ldd	r24, Y+19	; 0x13
    3af6:	9c 89       	ldd	r25, Y+20	; 0x14
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	69 f7       	brne	.-38     	; 0x3ad6 <main+0xd80>
    3afc:	14 c0       	rjmp	.+40     	; 0x3b26 <main+0xdd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afe:	6d 89       	ldd	r22, Y+21	; 0x15
    3b00:	7e 89       	ldd	r23, Y+22	; 0x16
    3b02:	8f 89       	ldd	r24, Y+23	; 0x17
    3b04:	98 8d       	ldd	r25, Y+24	; 0x18
    3b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	9c 8b       	std	Y+20, r25	; 0x14
    3b10:	8b 8b       	std	Y+19, r24	; 0x13
    3b12:	8b 89       	ldd	r24, Y+19	; 0x13
    3b14:	9c 89       	ldd	r25, Y+20	; 0x14
    3b16:	98 8b       	std	Y+16, r25	; 0x10
    3b18:	8f 87       	std	Y+15, r24	; 0x0f
    3b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b1c:	98 89       	ldd	r25, Y+16	; 0x10
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	f1 f7       	brne	.-4      	; 0x3b1e <main+0xdc8>
    3b22:	98 8b       	std	Y+16, r25	; 0x10
    3b24:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(100);



		if( CO2 > 200 || co2_flage == 1 )
    3b26:	fe 01       	movw	r30, r28
    3b28:	e2 57       	subi	r30, 0x72	; 114
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	80 81       	ld	r24, Z
    3b2e:	89 3c       	cpi	r24, 0xC9	; 201
    3b30:	38 f4       	brcc	.+14     	; 0x3b40 <main+0xdea>
    3b32:	80 91 76 01 	lds	r24, 0x0176
    3b36:	90 91 77 01 	lds	r25, 0x0177
    3b3a:	81 30       	cpi	r24, 0x01	; 1
    3b3c:	91 05       	cpc	r25, r1
    3b3e:	71 f4       	brne	.+28     	; 0x3b5c <main+0xe06>
		{
			GPIO_writePin( PORTC_ID , PIN6_ID , 1 );
    3b40:	82 e0       	ldi	r24, 0x02	; 2
    3b42:	66 e0       	ldi	r22, 0x06	; 6
    3b44:	41 e0       	ldi	r20, 0x01	; 1
    3b46:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
			co2_flage = 1;
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	90 93 77 01 	sts	0x0177, r25
    3b52:	80 93 76 01 	sts	0x0176, r24
			UART_sendByte( GAS_IS_DETECTED );
    3b56:	85 e3       	ldi	r24, 0x35	; 53
    3b58:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_sendByte>
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	a8 ec       	ldi	r26, 0xC8	; 200
    3b62:	b2 e4       	ldi	r27, 0x42	; 66
    3b64:	8b 87       	std	Y+11, r24	; 0x0b
    3b66:	9c 87       	std	Y+12, r25	; 0x0c
    3b68:	ad 87       	std	Y+13, r26	; 0x0d
    3b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	4a e7       	ldi	r20, 0x7A	; 122
    3b7a:	55 e4       	ldi	r21, 0x45	; 69
    3b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	8f 83       	std	Y+7, r24	; 0x07
    3b86:	98 87       	std	Y+8, r25	; 0x08
    3b88:	a9 87       	std	Y+9, r26	; 0x09
    3b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8e:	78 85       	ldd	r23, Y+8	; 0x08
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
    3b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e8       	ldi	r20, 0x80	; 128
    3b9a:	5f e3       	ldi	r21, 0x3F	; 63
    3b9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ba0:	88 23       	and	r24, r24
    3ba2:	2c f4       	brge	.+10     	; 0x3bae <main+0xe58>
		__ticks = 1;
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	9e 83       	std	Y+6, r25	; 0x06
    3baa:	8d 83       	std	Y+5, r24	; 0x05
    3bac:	3f c0       	rjmp	.+126    	; 0x3c2c <main+0xed6>
	else if (__tmp > 65535)
    3bae:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb0:	78 85       	ldd	r23, Y+8	; 0x08
    3bb2:	89 85       	ldd	r24, Y+9	; 0x09
    3bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	3f ef       	ldi	r19, 0xFF	; 255
    3bba:	4f e7       	ldi	r20, 0x7F	; 127
    3bbc:	57 e4       	ldi	r21, 0x47	; 71
    3bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc2:	18 16       	cp	r1, r24
    3bc4:	4c f5       	brge	.+82     	; 0x3c18 <main+0xec2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e2       	ldi	r20, 0x20	; 32
    3bd4:	51 e4       	ldi	r21, 0x41	; 65
    3bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	9e 83       	std	Y+6, r25	; 0x06
    3bec:	8d 83       	std	Y+5, r24	; 0x05
    3bee:	0f c0       	rjmp	.+30     	; 0x3c0e <main+0xeb8>
    3bf0:	80 e9       	ldi	r24, 0x90	; 144
    3bf2:	91 e0       	ldi	r25, 0x01	; 1
    3bf4:	9c 83       	std	Y+4, r25	; 0x04
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
    3bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	f1 f7       	brne	.-4      	; 0x3bfc <main+0xea6>
    3c00:	9c 83       	std	Y+4, r25	; 0x04
    3c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	9e 81       	ldd	r25, Y+6	; 0x06
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	9e 83       	std	Y+6, r25	; 0x06
    3c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c10:	9e 81       	ldd	r25, Y+6	; 0x06
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	69 f7       	brne	.-38     	; 0x3bf0 <main+0xe9a>
    3c16:	95 c9       	rjmp	.-3286   	; 0x2f42 <main+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c18:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1a:	78 85       	ldd	r23, Y+8	; 0x08
    3c1c:	89 85       	ldd	r24, Y+9	; 0x09
    3c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	9a 83       	std	Y+2, r25	; 0x02
    3c32:	89 83       	std	Y+1, r24	; 0x01
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	9a 81       	ldd	r25, Y+2	; 0x02
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	f1 f7       	brne	.-4      	; 0x3c38 <main+0xee2>
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	89 83       	std	Y+1, r24	; 0x01
    3c40:	80 c9       	rjmp	.-3328   	; 0x2f42 <main+0x1ec>

00003c42 <__vector_1>:
}



ISR(INT0_vect)
{
    3c42:	1f 92       	push	r1
    3c44:	0f 92       	push	r0
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	0f 92       	push	r0
    3c4a:	11 24       	eor	r1, r1
    3c4c:	2f 93       	push	r18
    3c4e:	3f 93       	push	r19
    3c50:	4f 93       	push	r20
    3c52:	5f 93       	push	r21
    3c54:	6f 93       	push	r22
    3c56:	7f 93       	push	r23
    3c58:	8f 93       	push	r24
    3c5a:	9f 93       	push	r25
    3c5c:	af 93       	push	r26
    3c5e:	bf 93       	push	r27
    3c60:	ef 93       	push	r30
    3c62:	ff 93       	push	r31
    3c64:	df 93       	push	r29
    3c66:	cf 93       	push	r28
    3c68:	cd b7       	in	r28, 0x3d	; 61
    3c6a:	de b7       	in	r29, 0x3e	; 62
    3c6c:	2e 97       	sbiw	r28, 0x0e	; 14
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	cd bf       	out	0x3d, r28	; 61
	if( INT1_flage == 1 )
    3c72:	80 91 73 01 	lds	r24, 0x0173
    3c76:	81 30       	cpi	r24, 0x01	; 1
    3c78:	09 f0       	breq	.+2      	; 0x3c7c <__vector_1+0x3a>
    3c7a:	8d c0       	rjmp	.+282    	; 0x3d96 <__vector_1+0x154>
	{
		INT1_flage = 0;
    3c7c:	10 92 73 01 	sts	0x0173, r1
		if(counter != 0)
    3c80:	80 91 74 01 	lds	r24, 0x0174
    3c84:	90 91 75 01 	lds	r25, 0x0175
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	49 f0       	breq	.+18     	; 0x3c9e <__vector_1+0x5c>
			counter--;
    3c8c:	80 91 74 01 	lds	r24, 0x0174
    3c90:	90 91 75 01 	lds	r25, 0x0175
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	90 93 75 01 	sts	0x0175, r25
    3c9a:	80 93 74 01 	sts	0x0174, r24

		while( PORTD & (1<<2 )  );
    3c9e:	e2 e3       	ldi	r30, 0x32	; 50
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	80 81       	ld	r24, Z
    3ca4:	88 2f       	mov	r24, r24
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	84 70       	andi	r24, 0x04	; 4
    3caa:	90 70       	andi	r25, 0x00	; 0
    3cac:	00 97       	sbiw	r24, 0x00	; 0
    3cae:	b9 f7       	brne	.-18     	; 0x3c9e <__vector_1+0x5c>
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	aa ef       	ldi	r26, 0xFA	; 250
    3cb6:	b3 e4       	ldi	r27, 0x43	; 67
    3cb8:	8b 87       	std	Y+11, r24	; 0x0b
    3cba:	9c 87       	std	Y+12, r25	; 0x0c
    3cbc:	ad 87       	std	Y+13, r26	; 0x0d
    3cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	4a e7       	ldi	r20, 0x7A	; 122
    3cce:	55 e4       	ldi	r21, 0x45	; 69
    3cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	8f 83       	std	Y+7, r24	; 0x07
    3cda:	98 87       	std	Y+8, r25	; 0x08
    3cdc:	a9 87       	std	Y+9, r26	; 0x09
    3cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce2:	78 85       	ldd	r23, Y+8	; 0x08
    3ce4:	89 85       	ldd	r24, Y+9	; 0x09
    3ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e8       	ldi	r20, 0x80	; 128
    3cee:	5f e3       	ldi	r21, 0x3F	; 63
    3cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf4:	88 23       	and	r24, r24
    3cf6:	2c f4       	brge	.+10     	; 0x3d02 <__vector_1+0xc0>
		__ticks = 1;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	9e 83       	std	Y+6, r25	; 0x06
    3cfe:	8d 83       	std	Y+5, r24	; 0x05
    3d00:	3f c0       	rjmp	.+126    	; 0x3d80 <__vector_1+0x13e>
	else if (__tmp > 65535)
    3d02:	6f 81       	ldd	r22, Y+7	; 0x07
    3d04:	78 85       	ldd	r23, Y+8	; 0x08
    3d06:	89 85       	ldd	r24, Y+9	; 0x09
    3d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	3f ef       	ldi	r19, 0xFF	; 255
    3d0e:	4f e7       	ldi	r20, 0x7F	; 127
    3d10:	57 e4       	ldi	r21, 0x47	; 71
    3d12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d16:	18 16       	cp	r1, r24
    3d18:	4c f5       	brge	.+82     	; 0x3d6c <__vector_1+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e2       	ldi	r20, 0x20	; 32
    3d28:	51 e4       	ldi	r21, 0x41	; 65
    3d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	bc 01       	movw	r22, r24
    3d34:	cd 01       	movw	r24, r26
    3d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	9e 83       	std	Y+6, r25	; 0x06
    3d40:	8d 83       	std	Y+5, r24	; 0x05
    3d42:	0f c0       	rjmp	.+30     	; 0x3d62 <__vector_1+0x120>
    3d44:	80 e9       	ldi	r24, 0x90	; 144
    3d46:	91 e0       	ldi	r25, 0x01	; 1
    3d48:	9c 83       	std	Y+4, r25	; 0x04
    3d4a:	8b 83       	std	Y+3, r24	; 0x03
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <__vector_1+0x10e>
    3d54:	9c 83       	std	Y+4, r25	; 0x04
    3d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	9e 83       	std	Y+6, r25	; 0x06
    3d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d62:	8d 81       	ldd	r24, Y+5	; 0x05
    3d64:	9e 81       	ldd	r25, Y+6	; 0x06
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	69 f7       	brne	.-38     	; 0x3d44 <__vector_1+0x102>
    3d6a:	18 c0       	rjmp	.+48     	; 0x3d9c <__vector_1+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6e:	78 85       	ldd	r23, Y+8	; 0x08
    3d70:	89 85       	ldd	r24, Y+9	; 0x09
    3d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9e 83       	std	Y+6, r25	; 0x06
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	9a 83       	std	Y+2, r25	; 0x02
    3d86:	89 83       	std	Y+1, r24	; 0x01
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <__vector_1+0x14a>
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	03 c0       	rjmp	.+6      	; 0x3d9c <__vector_1+0x15a>
		_delay_ms(500);

	}else
	{
		INT0_flage = 1;
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	80 93 72 01 	sts	0x0172, r24
	}

}
    3d9c:	2e 96       	adiw	r28, 0x0e	; 14
    3d9e:	de bf       	out	0x3e, r29	; 62
    3da0:	cd bf       	out	0x3d, r28	; 61
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	ff 91       	pop	r31
    3da8:	ef 91       	pop	r30
    3daa:	bf 91       	pop	r27
    3dac:	af 91       	pop	r26
    3dae:	9f 91       	pop	r25
    3db0:	8f 91       	pop	r24
    3db2:	7f 91       	pop	r23
    3db4:	6f 91       	pop	r22
    3db6:	5f 91       	pop	r21
    3db8:	4f 91       	pop	r20
    3dba:	3f 91       	pop	r19
    3dbc:	2f 91       	pop	r18
    3dbe:	0f 90       	pop	r0
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	0f 90       	pop	r0
    3dc4:	1f 90       	pop	r1
    3dc6:	18 95       	reti

00003dc8 <__vector_2>:

ISR(INT1_vect)
{
    3dc8:	1f 92       	push	r1
    3dca:	0f 92       	push	r0
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	0f 92       	push	r0
    3dd0:	11 24       	eor	r1, r1
    3dd2:	2f 93       	push	r18
    3dd4:	3f 93       	push	r19
    3dd6:	4f 93       	push	r20
    3dd8:	5f 93       	push	r21
    3dda:	6f 93       	push	r22
    3ddc:	7f 93       	push	r23
    3dde:	8f 93       	push	r24
    3de0:	9f 93       	push	r25
    3de2:	af 93       	push	r26
    3de4:	bf 93       	push	r27
    3de6:	ef 93       	push	r30
    3de8:	ff 93       	push	r31
    3dea:	df 93       	push	r29
    3dec:	cf 93       	push	r28
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	6c 97       	sbiw	r28, 0x1c	; 28
    3df4:	de bf       	out	0x3e, r29	; 62
    3df6:	cd bf       	out	0x3d, r28	; 61
	if( INT0_flage == 1 )
    3df8:	80 91 72 01 	lds	r24, 0x0172
    3dfc:	81 30       	cpi	r24, 0x01	; 1
    3dfe:	09 f0       	breq	.+2      	; 0x3e02 <__vector_2+0x3a>
    3e00:	87 c0       	rjmp	.+270    	; 0x3f10 <__vector_2+0x148>
	{
		INT0_flage = 0;
    3e02:	10 92 72 01 	sts	0x0172, r1
		counter ++;
    3e06:	80 91 74 01 	lds	r24, 0x0174
    3e0a:	90 91 75 01 	lds	r25, 0x0175
    3e0e:	01 96       	adiw	r24, 0x01	; 1
    3e10:	90 93 75 01 	sts	0x0175, r25
    3e14:	80 93 74 01 	sts	0x0174, r24

		while( PORTD & (1<<3 )  );
    3e18:	e2 e3       	ldi	r30, 0x32	; 50
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	88 2f       	mov	r24, r24
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	88 70       	andi	r24, 0x08	; 8
    3e24:	90 70       	andi	r25, 0x00	; 0
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	b9 f7       	brne	.-18     	; 0x3e18 <__vector_2+0x50>
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	aa ef       	ldi	r26, 0xFA	; 250
    3e30:	b3 e4       	ldi	r27, 0x43	; 67
    3e32:	89 8f       	std	Y+25, r24	; 0x19
    3e34:	9a 8f       	std	Y+26, r25	; 0x1a
    3e36:	ab 8f       	std	Y+27, r26	; 0x1b
    3e38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e3a:	69 8d       	ldd	r22, Y+25	; 0x19
    3e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	4a e7       	ldi	r20, 0x7A	; 122
    3e48:	55 e4       	ldi	r21, 0x45	; 69
    3e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	8d 8b       	std	Y+21, r24	; 0x15
    3e54:	9e 8b       	std	Y+22, r25	; 0x16
    3e56:	af 8b       	std	Y+23, r26	; 0x17
    3e58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3e5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e60:	98 8d       	ldd	r25, Y+24	; 0x18
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e8       	ldi	r20, 0x80	; 128
    3e68:	5f e3       	ldi	r21, 0x3F	; 63
    3e6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e6e:	88 23       	and	r24, r24
    3e70:	2c f4       	brge	.+10     	; 0x3e7c <__vector_2+0xb4>
		__ticks = 1;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	9c 8b       	std	Y+20, r25	; 0x14
    3e78:	8b 8b       	std	Y+19, r24	; 0x13
    3e7a:	3f c0       	rjmp	.+126    	; 0x3efa <__vector_2+0x132>
	else if (__tmp > 65535)
    3e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3e80:	8f 89       	ldd	r24, Y+23	; 0x17
    3e82:	98 8d       	ldd	r25, Y+24	; 0x18
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	3f ef       	ldi	r19, 0xFF	; 255
    3e88:	4f e7       	ldi	r20, 0x7F	; 127
    3e8a:	57 e4       	ldi	r21, 0x47	; 71
    3e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e90:	18 16       	cp	r1, r24
    3e92:	4c f5       	brge	.+82     	; 0x3ee6 <__vector_2+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e94:	69 8d       	ldd	r22, Y+25	; 0x19
    3e96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	40 e2       	ldi	r20, 0x20	; 32
    3ea2:	51 e4       	ldi	r21, 0x41	; 65
    3ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	bc 01       	movw	r22, r24
    3eae:	cd 01       	movw	r24, r26
    3eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	9c 8b       	std	Y+20, r25	; 0x14
    3eba:	8b 8b       	std	Y+19, r24	; 0x13
    3ebc:	0f c0       	rjmp	.+30     	; 0x3edc <__vector_2+0x114>
    3ebe:	80 e9       	ldi	r24, 0x90	; 144
    3ec0:	91 e0       	ldi	r25, 0x01	; 1
    3ec2:	9a 8b       	std	Y+18, r25	; 0x12
    3ec4:	89 8b       	std	Y+17, r24	; 0x11
    3ec6:	89 89       	ldd	r24, Y+17	; 0x11
    3ec8:	9a 89       	ldd	r25, Y+18	; 0x12
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <__vector_2+0x102>
    3ece:	9a 8b       	std	Y+18, r25	; 0x12
    3ed0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ed6:	01 97       	sbiw	r24, 0x01	; 1
    3ed8:	9c 8b       	std	Y+20, r25	; 0x14
    3eda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3edc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ede:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee0:	00 97       	sbiw	r24, 0x00	; 0
    3ee2:	69 f7       	brne	.-38     	; 0x3ebe <__vector_2+0xf6>
    3ee4:	18 c0       	rjmp	.+48     	; 0x3f16 <__vector_2+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    3eea:	8f 89       	ldd	r24, Y+23	; 0x17
    3eec:	98 8d       	ldd	r25, Y+24	; 0x18
    3eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	9c 8b       	std	Y+20, r25	; 0x14
    3ef8:	8b 8b       	std	Y+19, r24	; 0x13
    3efa:	8b 89       	ldd	r24, Y+19	; 0x13
    3efc:	9c 89       	ldd	r25, Y+20	; 0x14
    3efe:	98 8b       	std	Y+16, r25	; 0x10
    3f00:	8f 87       	std	Y+15, r24	; 0x0f
    3f02:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f04:	98 89       	ldd	r25, Y+16	; 0x10
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	f1 f7       	brne	.-4      	; 0x3f06 <__vector_2+0x13e>
    3f0a:	98 8b       	std	Y+16, r25	; 0x10
    3f0c:	8f 87       	std	Y+15, r24	; 0x0f
    3f0e:	03 c0       	rjmp	.+6      	; 0x3f16 <__vector_2+0x14e>
		_delay_ms(500);

	}else
	{
		INT1_flage = 1;
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	80 93 73 01 	sts	0x0173, r24
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	a0 e2       	ldi	r26, 0x20	; 32
    3f1c:	b1 e4       	ldi	r27, 0x41	; 65
    3f1e:	8b 87       	std	Y+11, r24	; 0x0b
    3f20:	9c 87       	std	Y+12, r25	; 0x0c
    3f22:	ad 87       	std	Y+13, r26	; 0x0d
    3f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	4a e7       	ldi	r20, 0x7A	; 122
    3f34:	55 e4       	ldi	r21, 0x45	; 69
    3f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	8f 83       	std	Y+7, r24	; 0x07
    3f40:	98 87       	std	Y+8, r25	; 0x08
    3f42:	a9 87       	std	Y+9, r26	; 0x09
    3f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f46:	6f 81       	ldd	r22, Y+7	; 0x07
    3f48:	78 85       	ldd	r23, Y+8	; 0x08
    3f4a:	89 85       	ldd	r24, Y+9	; 0x09
    3f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	40 e8       	ldi	r20, 0x80	; 128
    3f54:	5f e3       	ldi	r21, 0x3F	; 63
    3f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f5a:	88 23       	and	r24, r24
    3f5c:	2c f4       	brge	.+10     	; 0x3f68 <__vector_2+0x1a0>
		__ticks = 1;
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
    3f66:	3f c0       	rjmp	.+126    	; 0x3fe6 <__vector_2+0x21e>
	else if (__tmp > 65535)
    3f68:	6f 81       	ldd	r22, Y+7	; 0x07
    3f6a:	78 85       	ldd	r23, Y+8	; 0x08
    3f6c:	89 85       	ldd	r24, Y+9	; 0x09
    3f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	3f ef       	ldi	r19, 0xFF	; 255
    3f74:	4f e7       	ldi	r20, 0x7F	; 127
    3f76:	57 e4       	ldi	r21, 0x47	; 71
    3f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f7c:	18 16       	cp	r1, r24
    3f7e:	4c f5       	brge	.+82     	; 0x3fd2 <__vector_2+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 e2       	ldi	r20, 0x20	; 32
    3f8e:	51 e4       	ldi	r21, 0x41	; 65
    3f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	bc 01       	movw	r22, r24
    3f9a:	cd 01       	movw	r24, r26
    3f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	9e 83       	std	Y+6, r25	; 0x06
    3fa6:	8d 83       	std	Y+5, r24	; 0x05
    3fa8:	0f c0       	rjmp	.+30     	; 0x3fc8 <__vector_2+0x200>
    3faa:	80 e9       	ldi	r24, 0x90	; 144
    3fac:	91 e0       	ldi	r25, 0x01	; 1
    3fae:	9c 83       	std	Y+4, r25	; 0x04
    3fb0:	8b 83       	std	Y+3, r24	; 0x03
    3fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb6:	01 97       	sbiw	r24, 0x01	; 1
    3fb8:	f1 f7       	brne	.-4      	; 0x3fb6 <__vector_2+0x1ee>
    3fba:	9c 83       	std	Y+4, r25	; 0x04
    3fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc2:	01 97       	sbiw	r24, 0x01	; 1
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fca:	9e 81       	ldd	r25, Y+6	; 0x06
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	69 f7       	brne	.-38     	; 0x3faa <__vector_2+0x1e2>
    3fd0:	14 c0       	rjmp	.+40     	; 0x3ffa <__vector_2+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd4:	78 85       	ldd	r23, Y+8	; 0x08
    3fd6:	89 85       	ldd	r24, Y+9	; 0x09
    3fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	9e 83       	std	Y+6, r25	; 0x06
    3fe4:	8d 83       	std	Y+5, r24	; 0x05
    3fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fea:	9a 83       	std	Y+2, r25	; 0x02
    3fec:	89 83       	std	Y+1, r24	; 0x01
    3fee:	89 81       	ldd	r24, Y+1	; 0x01
    3ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	f1 f7       	brne	.-4      	; 0x3ff2 <__vector_2+0x22a>
    3ff6:	9a 83       	std	Y+2, r25	; 0x02
    3ff8:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(10);

}
    3ffa:	6c 96       	adiw	r28, 0x1c	; 28
    3ffc:	de bf       	out	0x3e, r29	; 62
    3ffe:	cd bf       	out	0x3d, r28	; 61
    4000:	cf 91       	pop	r28
    4002:	df 91       	pop	r29
    4004:	ff 91       	pop	r31
    4006:	ef 91       	pop	r30
    4008:	bf 91       	pop	r27
    400a:	af 91       	pop	r26
    400c:	9f 91       	pop	r25
    400e:	8f 91       	pop	r24
    4010:	7f 91       	pop	r23
    4012:	6f 91       	pop	r22
    4014:	5f 91       	pop	r21
    4016:	4f 91       	pop	r20
    4018:	3f 91       	pop	r19
    401a:	2f 91       	pop	r18
    401c:	0f 90       	pop	r0
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	0f 90       	pop	r0
    4022:	1f 90       	pop	r1
    4024:	18 95       	reti

00004026 <SevenSegment_display>:



#ifdef SEGMENT7_WITH_DECODER /*so I have a decoder*/
void SevenSegment_display(uint8 value)
{
    4026:	df 93       	push	r29
    4028:	cf 93       	push	r28
    402a:	0f 92       	push	r0
    402c:	cd b7       	in	r28, 0x3d	; 61
    402e:	de b7       	in	r29, 0x3e	; 62
    4030:	89 83       	std	Y+1, r24	; 0x01

	GPIO_setupPinDirection(SEGMENT7_PORT_ID, SEGMENT7_PIN0_ID, OUTPUT);
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	41 e0       	ldi	r20, 0x01	; 1
    4038:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SEGMENT7_PORT_ID, SEGMENT7_PIN1_ID, OUTPUT);
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	61 e0       	ldi	r22, 0x01	; 1
    4040:	41 e0       	ldi	r20, 0x01	; 1
    4042:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SEGMENT7_PORT_ID, SEGMENT7_PIN2_ID, OUTPUT);
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	62 e0       	ldi	r22, 0x02	; 2
    404a:	41 e0       	ldi	r20, 0x01	; 1
    404c:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SEGMENT7_PORT_ID, SEGMENT7_PIN3_ID, OUTPUT);
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	64 e0       	ldi	r22, 0x04	; 4
    4054:	41 e0       	ldi	r20, 0x01	; 1
    4056:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPinDirection>

	GPIO_writePin(SEGMENT7_PORT_ID, SEGMENT7_PIN0_ID , GET_BIT(value,0));
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	98 2f       	mov	r25, r24
    405e:	91 70       	andi	r25, 0x01	; 1
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	49 2f       	mov	r20, r25
    4066:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(SEGMENT7_PORT_ID, SEGMENT7_PIN1_ID , GET_BIT(value,1));
    406a:	89 81       	ldd	r24, Y+1	; 0x01
    406c:	88 2f       	mov	r24, r24
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	82 70       	andi	r24, 0x02	; 2
    4072:	90 70       	andi	r25, 0x00	; 0
    4074:	95 95       	asr	r25
    4076:	87 95       	ror	r24
    4078:	98 2f       	mov	r25, r24
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	61 e0       	ldi	r22, 0x01	; 1
    407e:	49 2f       	mov	r20, r25
    4080:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(SEGMENT7_PORT_ID, SEGMENT7_PIN2_ID , GET_BIT(value,2));
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	88 2f       	mov	r24, r24
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	84 70       	andi	r24, 0x04	; 4
    408c:	90 70       	andi	r25, 0x00	; 0
    408e:	95 95       	asr	r25
    4090:	87 95       	ror	r24
    4092:	95 95       	asr	r25
    4094:	87 95       	ror	r24
    4096:	98 2f       	mov	r25, r24
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	62 e0       	ldi	r22, 0x02	; 2
    409c:	49 2f       	mov	r20, r25
    409e:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
	GPIO_writePin(SEGMENT7_PORT_ID, SEGMENT7_PIN3_ID , GET_BIT(value,3));
    40a2:	89 81       	ldd	r24, Y+1	; 0x01
    40a4:	88 2f       	mov	r24, r24
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	88 70       	andi	r24, 0x08	; 8
    40aa:	90 70       	andi	r25, 0x00	; 0
    40ac:	95 95       	asr	r25
    40ae:	87 95       	ror	r24
    40b0:	95 95       	asr	r25
    40b2:	87 95       	ror	r24
    40b4:	95 95       	asr	r25
    40b6:	87 95       	ror	r24
    40b8:	98 2f       	mov	r25, r24
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	64 e0       	ldi	r22, 0x04	; 4
    40be:	49 2f       	mov	r20, r25
    40c0:	0e 94 a2 09 	call	0x1344	; 0x1344 <GPIO_writePin>
}
    40c4:	0f 90       	pop	r0
    40c6:	cf 91       	pop	r28
    40c8:	df 91       	pop	r29
    40ca:	08 95       	ret

000040cc <__udivmodsi4>:
    40cc:	a1 e2       	ldi	r26, 0x21	; 33
    40ce:	1a 2e       	mov	r1, r26
    40d0:	aa 1b       	sub	r26, r26
    40d2:	bb 1b       	sub	r27, r27
    40d4:	fd 01       	movw	r30, r26
    40d6:	0d c0       	rjmp	.+26     	; 0x40f2 <__udivmodsi4_ep>

000040d8 <__udivmodsi4_loop>:
    40d8:	aa 1f       	adc	r26, r26
    40da:	bb 1f       	adc	r27, r27
    40dc:	ee 1f       	adc	r30, r30
    40de:	ff 1f       	adc	r31, r31
    40e0:	a2 17       	cp	r26, r18
    40e2:	b3 07       	cpc	r27, r19
    40e4:	e4 07       	cpc	r30, r20
    40e6:	f5 07       	cpc	r31, r21
    40e8:	20 f0       	brcs	.+8      	; 0x40f2 <__udivmodsi4_ep>
    40ea:	a2 1b       	sub	r26, r18
    40ec:	b3 0b       	sbc	r27, r19
    40ee:	e4 0b       	sbc	r30, r20
    40f0:	f5 0b       	sbc	r31, r21

000040f2 <__udivmodsi4_ep>:
    40f2:	66 1f       	adc	r22, r22
    40f4:	77 1f       	adc	r23, r23
    40f6:	88 1f       	adc	r24, r24
    40f8:	99 1f       	adc	r25, r25
    40fa:	1a 94       	dec	r1
    40fc:	69 f7       	brne	.-38     	; 0x40d8 <__udivmodsi4_loop>
    40fe:	60 95       	com	r22
    4100:	70 95       	com	r23
    4102:	80 95       	com	r24
    4104:	90 95       	com	r25
    4106:	9b 01       	movw	r18, r22
    4108:	ac 01       	movw	r20, r24
    410a:	bd 01       	movw	r22, r26
    410c:	cf 01       	movw	r24, r30
    410e:	08 95       	ret

00004110 <__prologue_saves__>:
    4110:	2f 92       	push	r2
    4112:	3f 92       	push	r3
    4114:	4f 92       	push	r4
    4116:	5f 92       	push	r5
    4118:	6f 92       	push	r6
    411a:	7f 92       	push	r7
    411c:	8f 92       	push	r8
    411e:	9f 92       	push	r9
    4120:	af 92       	push	r10
    4122:	bf 92       	push	r11
    4124:	cf 92       	push	r12
    4126:	df 92       	push	r13
    4128:	ef 92       	push	r14
    412a:	ff 92       	push	r15
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    4138:	ca 1b       	sub	r28, r26
    413a:	db 0b       	sbc	r29, r27
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    4146:	09 94       	ijmp

00004148 <__epilogue_restores__>:
    4148:	2a 88       	ldd	r2, Y+18	; 0x12
    414a:	39 88       	ldd	r3, Y+17	; 0x11
    414c:	48 88       	ldd	r4, Y+16	; 0x10
    414e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4150:	6e 84       	ldd	r6, Y+14	; 0x0e
    4152:	7d 84       	ldd	r7, Y+13	; 0x0d
    4154:	8c 84       	ldd	r8, Y+12	; 0x0c
    4156:	9b 84       	ldd	r9, Y+11	; 0x0b
    4158:	aa 84       	ldd	r10, Y+10	; 0x0a
    415a:	b9 84       	ldd	r11, Y+9	; 0x09
    415c:	c8 84       	ldd	r12, Y+8	; 0x08
    415e:	df 80       	ldd	r13, Y+7	; 0x07
    4160:	ee 80       	ldd	r14, Y+6	; 0x06
    4162:	fd 80       	ldd	r15, Y+5	; 0x05
    4164:	0c 81       	ldd	r16, Y+4	; 0x04
    4166:	1b 81       	ldd	r17, Y+3	; 0x03
    4168:	aa 81       	ldd	r26, Y+2	; 0x02
    416a:	b9 81       	ldd	r27, Y+1	; 0x01
    416c:	ce 0f       	add	r28, r30
    416e:	d1 1d       	adc	r29, r1
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	ed 01       	movw	r28, r26
    417c:	08 95       	ret

0000417e <itoa>:
    417e:	fb 01       	movw	r30, r22
    4180:	9f 01       	movw	r18, r30
    4182:	e8 94       	clt
    4184:	42 30       	cpi	r20, 0x02	; 2
    4186:	c4 f0       	brlt	.+48     	; 0x41b8 <itoa+0x3a>
    4188:	45 32       	cpi	r20, 0x25	; 37
    418a:	b4 f4       	brge	.+44     	; 0x41b8 <itoa+0x3a>
    418c:	4a 30       	cpi	r20, 0x0A	; 10
    418e:	29 f4       	brne	.+10     	; 0x419a <itoa+0x1c>
    4190:	97 fb       	bst	r25, 7
    4192:	1e f4       	brtc	.+6      	; 0x419a <itoa+0x1c>
    4194:	90 95       	com	r25
    4196:	81 95       	neg	r24
    4198:	9f 4f       	sbci	r25, 0xFF	; 255
    419a:	64 2f       	mov	r22, r20
    419c:	77 27       	eor	r23, r23
    419e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
    41a2:	80 5d       	subi	r24, 0xD0	; 208
    41a4:	8a 33       	cpi	r24, 0x3A	; 58
    41a6:	0c f0       	brlt	.+2      	; 0x41aa <itoa+0x2c>
    41a8:	89 5d       	subi	r24, 0xD9	; 217
    41aa:	81 93       	st	Z+, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	00 97       	sbiw	r24, 0x00	; 0
    41b0:	a1 f7       	brne	.-24     	; 0x419a <itoa+0x1c>
    41b2:	16 f4       	brtc	.+4      	; 0x41b8 <itoa+0x3a>
    41b4:	5d e2       	ldi	r21, 0x2D	; 45
    41b6:	51 93       	st	Z+, r21
    41b8:	10 82       	st	Z, r1
    41ba:	c9 01       	movw	r24, r18
    41bc:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <strrev>

000041c0 <strrev>:
    41c0:	dc 01       	movw	r26, r24
    41c2:	fc 01       	movw	r30, r24
    41c4:	67 2f       	mov	r22, r23
    41c6:	71 91       	ld	r23, Z+
    41c8:	77 23       	and	r23, r23
    41ca:	e1 f7       	brne	.-8      	; 0x41c4 <strrev+0x4>
    41cc:	32 97       	sbiw	r30, 0x02	; 2
    41ce:	04 c0       	rjmp	.+8      	; 0x41d8 <strrev+0x18>
    41d0:	7c 91       	ld	r23, X
    41d2:	6d 93       	st	X+, r22
    41d4:	70 83       	st	Z, r23
    41d6:	62 91       	ld	r22, -Z
    41d8:	ae 17       	cp	r26, r30
    41da:	bf 07       	cpc	r27, r31
    41dc:	c8 f3       	brcs	.-14     	; 0x41d0 <strrev+0x10>
    41de:	08 95       	ret

000041e0 <__udivmodhi4>:
    41e0:	aa 1b       	sub	r26, r26
    41e2:	bb 1b       	sub	r27, r27
    41e4:	51 e1       	ldi	r21, 0x11	; 17
    41e6:	07 c0       	rjmp	.+14     	; 0x41f6 <__udivmodhi4_ep>

000041e8 <__udivmodhi4_loop>:
    41e8:	aa 1f       	adc	r26, r26
    41ea:	bb 1f       	adc	r27, r27
    41ec:	a6 17       	cp	r26, r22
    41ee:	b7 07       	cpc	r27, r23
    41f0:	10 f0       	brcs	.+4      	; 0x41f6 <__udivmodhi4_ep>
    41f2:	a6 1b       	sub	r26, r22
    41f4:	b7 0b       	sbc	r27, r23

000041f6 <__udivmodhi4_ep>:
    41f6:	88 1f       	adc	r24, r24
    41f8:	99 1f       	adc	r25, r25
    41fa:	5a 95       	dec	r21
    41fc:	a9 f7       	brne	.-22     	; 0x41e8 <__udivmodhi4_loop>
    41fe:	80 95       	com	r24
    4200:	90 95       	com	r25
    4202:	bc 01       	movw	r22, r24
    4204:	cd 01       	movw	r24, r26
    4206:	08 95       	ret

00004208 <_exit>:
    4208:	f8 94       	cli

0000420a <__stop_program>:
    420a:	ff cf       	rjmp	.-2      	; 0x420a <__stop_program>
